<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Kai Way]]></title>
  <link href="http://kaichen.github.io/atom.xml" rel="self"/>
  <link href="http://kaichen.github.io/"/>
  <updated>2013-09-20T23:29:19+08:00</updated>
  <id>http://kaichen.github.io/</id>
  <author>
    <name><![CDATA[Kai Chen]]></name>
    <email><![CDATA[kaichenxyz@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Read and Write Activerecord Attribute]]></title>
    <link href="http://kaichen.github.io/2013/09/08/read-write-activerecord-attribute"/>
    <updated>2013-09-08T10:52:00+08:00</updated>
    <id>http://kaichen.github.io/2013/09/08/read-write-activerecord-attribute</id>
    <content type="html"><![CDATA[<p>上一节讲完了ActiveRecord的对象怎么从是数据库里取出来，但距离数据最终的读写其中还有不少的处理过程。比如模型的属性在读取时需要做出一些相应的转换，同理在修改了模型属性之后回写数据库的时候也需要做转换。另外ActiveRecord使用了Ruby的动态特性为所有的属性读写都生成了与属性名相对应的方法，让开发者能更加便捷地访问所需要的属性值。</p>

<h2>原始数据</h2>

<p>首先来看看数据库取出的数据怎样存放到对象中，以下是相应的代码，<code>instantiate</code>方法的解释请参考<a href="http://kaichen.github.io/2013/07/26/assemble-ar-object">Assemble ActiveRecord Object</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># file: active_record/persistence</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">instantiate</span><span class="p">(</span><span class="n">record</span><span class="p">,</span> <span class="n">column_types</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="n">column_types</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">decorate_columns</span><span class="p">(</span><span class="n">column_types</span><span class="o">.</span><span class="n">dup</span><span class="p">)</span>
</span><span class='line'>    <span class="n">klass</span><span class="o">.</span><span class="n">allocate</span><span class="o">.</span><span class="n">init_with</span><span class="p">(</span><span class="s1">&#39;attributes&#39;</span> <span class="o">=&gt;</span> <span class="n">record</span><span class="p">,</span> <span class="s1">&#39;column_types&#39;</span> <span class="o">=&gt;</span> <span class="n">column_types</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># file: active_record/core_</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">init_with</span><span class="p">(</span><span class="n">coder</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@attributes</span>   <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">initialize_attributes</span><span class="p">(</span><span class="n">coder</span><span class="o">[</span><span class="s1">&#39;attributes&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># 其他初始化过程 bla bla bla</span>
</span><span class='line'>    <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，数据库里的每条记录从数据库查出来之后，会直接塞进每个对象的<code>@attributes</code>实例变量中，这里包括了所有的字段的名字和值。这个原始的记录数据是个以属性名为键，原始内容为值的哈希表。</p>

<p>ActiveRecord提供了接口可以直接访问原始数据，这种方式就是直接对<code>@attributes</code>进行读取。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">attributes_before_type_cast</span> <span class="c1"># 读取所有原始数据</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">read_attribute_before_type_cast</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span> <span class="c1"># 读取ID字段的原始数据</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">id_before_type_cast</span> <span class="c1"># 同上，ActiveModel::AttributeMethods生成的DSL</span>
</span></code></pre></td></tr></table></div></figure>


<h2>读取属性</h2>

<p>通常我们不会直接访问原始数据，而是访问已经转化好的数据。ActiveRecord提供了几种形式来访问处理过属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;First Post&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="n">post</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">attributes</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">read_attribute</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="c1">#=&gt; &quot;First Post&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上几种的模型属性访问其实都通过同一个入口进行访问，这个入口就是<code>read_attribute</code>。以上几个属性读取的实现有兴趣可以自行翻查源码，我们来重点讲解<code>read_attribute</code>。</p>

<p><code>read_attribute</code>的基本逻辑如以下代码所示，这里是精简过的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># file: active_record/attribute_methods/read.rb</span>
</span><span class='line'><span class="k">def</span> <span class="nf">read_attribute</span><span class="p">(</span><span class="n">attr_name</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="n">attr_name</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="n">column</span> <span class="o">=</span> <span class="vi">@column_types</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="vi">@attributes</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">block_given?</span> <span class="p">?</span> <span class="k">yield</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">column</span><span class="o">.</span><span class="n">type_cast</span> <span class="n">value</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>查找对应对应的数据库字段(AR::ConnectionAdapters::Column)实例，即获得该属性在数据库里对应的类型</li>
<li>从原始数据<code>@attributes</code>里查找出对应的值</li>
<li>使用对应的字段类型来转换该属性的原始值</li>
</ol>


<h2>类型转换</h2>

<p>数据库表与AR对象的映射会在对应的章节里讲解，本篇只讲解和字段读写相关的部分，以下是类型转换的实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">type_cast</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">coder</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="k">if</span> <span class="n">encoded?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">klass</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="n">type</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">:text</span>        <span class="k">then</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:integer</span>              <span class="k">then</span> <span class="n">klass</span><span class="o">.</span><span class="n">value_to_integer</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:float</span>                <span class="k">then</span> <span class="n">value</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:decimal</span>              <span class="k">then</span> <span class="n">klass</span><span class="o">.</span><span class="n">value_to_decimal</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:datetime</span><span class="p">,</span> <span class="ss">:timestamp</span> <span class="k">then</span> <span class="n">klass</span><span class="o">.</span><span class="n">string_to_time</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:time</span>                 <span class="k">then</span> <span class="n">klass</span><span class="o">.</span><span class="n">string_to_dummy_time</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:date</span>                 <span class="k">then</span> <span class="n">klass</span><span class="o">.</span><span class="n">value_to_date</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:binary</span>               <span class="k">then</span> <span class="n">klass</span><span class="o">.</span><span class="n">binary_to_string</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:boolean</span>              <span class="k">then</span> <span class="n">klass</span><span class="o">.</span><span class="n">value_to_boolean</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们看到除了字符串和文本之外的类型都需要根据其逻辑类型，进行转换的方法主要是解析内容并实例化到对应的类型。</p>

<p>写入属性的情况与读取属性的逻辑基本相同，并且Column里有一个与<code>type_cast_for_write</code>对应的<code>type_cast_for_write</code>方法，用来处理写入的类型转换。</p>

<p>在扩展性方面，Postgres的链接代码重写了类型转换方法以支持它丰富的数据类型。</p>

<h2>自定义序列化字段</h2>

<p>ActiveRecord支持将Ruby对象直接序列化到数据库中，并且可以制定序列化的方式，默认使用的是YAML。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># file: active_record/attribute_methods/serialization.rb</span>
</span><span class='line'><span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">attr_name</span><span class="p">,</span> <span class="n">class_name</span> <span class="o">=</span> <span class="no">Object</span><span class="p">)</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Behavior</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">coder</span> <span class="o">=</span> <span class="k">if</span> <span class="o">[</span><span class="ss">:load</span><span class="p">,</span> <span class="ss">:dump</span><span class="o">].</span><span class="n">all?</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">class_name</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="n">class_name</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="ss">Coders</span><span class="p">:</span><span class="ss">:YAMLColumn</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">class_name</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">serialized_attributes</span> <span class="o">=</span> <span class="n">serialized_attributes</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">attr_name</span><span class="o">.</span><span class="n">to_s</span> <span class="o">=&gt;</span> <span class="n">coder</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在实现上通过Coder这种形式来在属性的读写时，调用Coder的<code>load</code>与<code>dump</code>方法进行预先处理。</p>

<p>这里指定的Coder并不需要特定的类型，它只需要实现接受一个参数的<code>load</code>和<code>dump</code>方法就可以作为一个Coder。</p>

<h2>属性方法的动态生成</h2>

<p>ActiveRecord模型利用Ruby的元编程能力，在运行时生成与数据库字段名相对应的读写方法。具体的方式就是使用<code>method_missing</code>和<code>respond_to?</code>，在找不到对应的方法时，ActiveRecord会在以上的两个方法里调用<code>define_attribute_methods</code>去生成<strong>所有的属性</strong>读写方法。</p>

<p>这个<code>define_attribute_methods</code>方法有两个定义，其中一个定义在ActiveRecord::AttributeMethods，另一个定义在ActiveModel::AttributeMethods模组中，其中实质性的定义是在ActiveModel中，ActiveRecord继承并在这之上加了一些线程安全和方法是否已经生成的标记。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># file: active_model/attribute_methods</span>
</span><span class='line'><span class="k">def</span> <span class="nf">define_attribute_methods</span><span class="p">(</span><span class="o">*</span><span class="n">attr_names</span><span class="p">)</span>
</span><span class='line'>  <span class="n">attr_names</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">attr_name</span><span class="o">|</span> <span class="n">define_attribute_method</span><span class="p">(</span><span class="n">attr_name</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActiveRecord里无需参数的定义主要作用只是代理，将所有的字段名字传入到ActiveModel里的<code>define_attribute_methods</code>。然后遍历所有的属性名，将每个属性都传入<code>define_attribute_method</code>里。<code>define_attribute_method</code>方法比较复杂，基本的思路是遍历所有的AttributeMethodMatcher，并从Matcher拼装出需要调用的方法名。</p>

<p>这里稍微解释一下AttributeMethodMetcher，所有模型的父类ActiveRecord::Base定义了一堆的Metcher，它用来为所有属性添加方法。除了上面的读写方法和原数据访问方法外，ActiveRecord模型还定义了如下一堆属性相关的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Nice Post&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">title?</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">title_before_type_cast</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">title_changed?</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">title_change</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">title_will_change!</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">title_was</span>
</span></code></pre></td></tr></table></div></figure>


<p>这类方法的定义就是通过Metcher，举个栗子，<code>{attribute}_before_type_cast</code>是这么定义的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">attribute_method_suffix</span> <span class="s2">&quot;_before_type_cast&quot;</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;ActiveModel::AttributeMethods::ClassMethods::AttributeMethodMatcher:0x007fb36c41ddf0</span>
</span><span class='line'><span class="c1">#     @method_missing_target=&quot;attribute_before_type_cast&quot;,</span>
</span><span class='line'><span class="c1">#     @method_name=&quot;%s_before_type_cast&quot;,</span>
</span><span class='line'><span class="c1">#     @prefix=&quot;&quot;,</span>
</span><span class='line'><span class="c1">#     @regex=/^(?:)(.*)(?:_before_type_cast)$/,</span>
</span><span class='line'><span class="c1">#     @suffix=&quot;_before_type_cast&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过这样的定义，前文提到的<code>define_attribute_method</code>的时候会调用到上面这个Matcher，然后通过<code>method_missing_target</code>调用<code>attribute_before_type_cast</code>去定义模型的<code>title_before_type_cast</code>。</p>

<p>同时在方法未定义的检查里也是通过遍历所有Matcher，找出是否为预定义的属性方法。</p>

<p>整个方法生成的故事就如是发展，在遇到未定义的方法的时候，ActiveRecord发现该方法是属性相关的方法，那么遍历所有的属性，再嵌套遍历所有的Matcher去生成所有的属性相关方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActionView Safe Buffer]]></title>
    <link href="http://kaichen.github.io/2013/08/17/actionview-safe-buffer"/>
    <updated>2013-08-17T17:04:00+08:00</updated>
    <id>http://kaichen.github.io/2013/08/17/actionview-safe-buffer</id>
    <content type="html"><![CDATA[<blockquote><p>本文是<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>的一部分, <a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>是由我正在编写的讲解Rails内部实现与设计的一本书, 欢迎阅读</p></blockquote>

<p>为了提高安全性，ActionView的模版在Rails 3中实现了名为SafeBuffer用来减少被<a href="http://en.wikipedia.org/wiki/Cross-site_scripting">XSS攻击</a>的风险。</p>

<h2>XSS攻击</h2>

<p>XSS，全称为Cross-site Scripting，中文叫跨站脚本攻击。这是通过对目标网页注入脚本（最常见是JavaScript，也可以是VBScript等），然后通过这段脚本来盗取用户cookies或做跨站提交等。</p>

<p>要防止这种攻击，Rails开发者必须非常小心地处理用户输入的内容，本篇讲到SafeBuffer就是帮助开发者减小被攻击的风险。</p>

<h2>HTML Safe</h2>

<p>在ActionView的Template中，默认的内容是HTML Unsafe的，HTML Unsafe的内容被拼接时会先用<code>ERB::Utils.html_escape</code>方法先处理一遍。只有两种才会被认为是HTML Safe的</p>

<ul>
<li>Numeric</li>
<li>AS::SafeBuffer的实例对象</li>
</ul>


<p>这里可能会让人出乎意料的是，SafeBuffer的实现放在ActiveSupport的String Extention里，具体定义文件在<code>active_support/core_ext/string/output_safety.rb
</code>。</p>

<p>SafeBuffer被定义为String的子类，与普通的String不同是SafeBuffer的<code>html_safe</code>属性为True。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveSupport</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">SafeBuffer</span> <span class="o">&lt;</span> <span class="nb">String</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@html_safe</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1"># other methods</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，对于其他的对象，通过打开类的方式将Object的html_safe设置为False，而Numeric被设置为True。具体定义如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Object</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">html_safe?</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Numeric</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">html_safe?</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们知道String的内容是可变的，同样SafeBuffer的内容也是可变的。出于安全性考虑SafeBuffer会将产生新对象或修改内容本身的方法，比如<code>capitalize</code>，<code>gsub</code>等等，都替换为结果是HTML Unsafe的字符串</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">class_eval</span> <span class="o">&lt;&lt;-</span><span class="no">EOT</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">,</span> <span class="bp">__LINE__</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="sh">  def #{unsafe_method}(*args, &amp;block)</span>
</span><span class='line'><span class="sh">    to_str.#{unsafe_method}(*args, &amp;block)</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sh">  def #{unsafe_method}!(*args)</span>
</span><span class='line'><span class="sh">    @html_safe = false</span>
</span><span class='line'><span class="sh">    super</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'><span class="no">EOT</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如替换后的capistalize方法是</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">capitalize</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">to_str</span><span class="o">.</span><span class="n">capitalize</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">capitalize!</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@html_safe</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">super</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>稍微解释一下方法替换的意义，在非<a href="http://dablog.rubypal.com/2007/8/15/bang-methods-or-danger-will-rubyist">bang方法</a>中，先调用<code>to_str</code>就将原字符串转化为普通的String，由于除了SafeBuffer外的对象都是unsafe的，通过这么转化本来HTML Safe的内容又变回了HTML Unsafe的状态。</p>

<p>当需要将内容标记为html safe状态的时候，可以调用<code>html_safe</code>方法，这个方法的原理就是构造一个新的SafeBuffer对象，代码如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">html_safe</span>
</span><span class='line'>    <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:SafeBuffer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>接口</h2>

<p>基本上所有模版语言都放出了，一些回调接口让开发者可以替换掉原有的Buffer实现。ActionView里定义的Template Handler就完成了模版语言Buffer实现的替换，比如这里的<a href="https://github.com/rails/rails/blob/4-0-stable/actionpack/lib/action_view/template/handlers/erb.rb">对Erb的替换</a>。</p>

<p>一些第三方的模板语言，比如<a href="https://github.com/haml/haml">Haml</a>直接集成了SafeBuffer，<a href="https://github.com/slim-template/slim">Slim</a>通过其依赖的<a href="https://github.com/judofyr/temple">Temple</a>也集成了SafeBuffer。</p>

<h2>参考</h2>

<ul>
<li><a href="http://yehudakatz.com/2010/02/01/safebuffers-and-rails-3-0/">http://yehudakatz.com/2010/02/01/safebuffers-and-rails-3-0/</a></li>
<li><a href="http://www.railsdispatch.com/posts/security">http://www.railsdispatch.com/posts/security</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails ujs]]></title>
    <link href="http://kaichen.github.io/2013/08/16/rails-ujs"/>
    <updated>2013-08-16T23:06:00+08:00</updated>
    <id>http://kaichen.github.io/2013/08/16/rails-ujs</id>
    <content type="html"><![CDATA[<p>UJS是Rails 3引入的JavaScript框架与Rails的抽象层。我们知道Rails一些Helper是依赖于JavaScript框架的，比如Ajax Form，Ajax Link等，并且在Rails 3之前默认集成的JavaScript框架是<a href="http://prototypejs.org/">Prototype</a>，再这之后才换成了社区呼声很高的<a href="http://jquery.org/">jQuery</a>。</p>

<p>如前面所说UJS是个抽象层，它需要在每个框架上实现对应的接口，比如官方实现了<a href="https://github.com/rails/jquery-ujs">jquery-ujs</a>和<a href="https://github.com/rails/prototype-ujs">prototype-ujs</a>。本篇主要以<a href="https://github.com/rails/jquery-ujs">jquery-ujs</a>为例来讲解UJS。jquery-ujs代码很短，只有500行不到，想先浏览一下整个代码可访问<a href="https://github.com/rails/jquery-ujs/blob/master/src/rails.js">Github的jquery-ujs repo</a>。</p>

<h2>data-confirm</h2>

<p>先从最简单confirm例子入手。比如，在某些链接上让用户在点击链接后再次确认一次，我们一般会这么写</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s2">&quot;Visit Other Site&quot;</span><span class="p">,</span> <span class="s2">&quot;http://www.rubyonrails.org/&quot;</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">confirm</span><span class="p">:</span> <span class="s2">&quot;Are you sure?&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里和普通的链接不同的地方只是在于多加了一个<code>data-confirm</code>属性，然后UJS帮你实现了弹出确认框。这其中的实现方法很简单，写过jQuery的同学都会，就是监听所有链接的<code>click</code>事件，当这个被点击链接上有<code>data-confirm</code>属性时，取出<code>data-confirm</code>中的文本，弹出确认框，并根据用户的操作选择是否中断这个点击事件的处理。</p>

<h2>data-method</h2>

<p>然后我们来看看，另外一种比较常见的链接用法，让链接点击时使用非GET方法请求对应的URL，代码如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span><span class="p">(</span><span class="s2">&quot;Sign Out&quot;</span><span class="p">,</span> <span class="n">sign_out_path</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:delete</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里传入的<code>method</code>参数，生成HTML时会被转换为<code>data-method="delete"</code>。与前面一个例子一样，UJS在这个链接的click事件上监听，当这个链接有<code>data-method</code>属性时，创建一个隐藏的<code>form</code>标签，并附带上名为<code>_method</code>参数，值为<code>data-method</code>属性值的<code>input</code>标签，最后将这个构造的表单提交。</p>

<p>通过这样的小技巧，Rails开发者就能通过<code>&lt;a&gt;</code>标签以任何想要的HTTP Method请求对应的链接。</p>

<h2>Ajax Form</h2>

<p>在Rails 3之后的<code>form_tag</code>和<code>form_for</code>上传入<code>remote: true</code>就能实现表单的Ajax提交，同样这个事情，UJS也是通过监听所有的Form标签的<code>submit</code>事件，然后检测标签上的<code>data-remote</code>属性来实现的。</p>

<p>对于开发者，在传入了<code>remote: true</code>之后要怎样去插入对应的Ajax处理器呢？UJS在对应Ajax提交阶段上触发了Rails自定义的<code>ajax:xxx</code>事件。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">beforeSend</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">xhr</span><span class="p">,</span> <span class="nx">settings</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">settings</span><span class="p">.</span><span class="nx">dataType</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">&#39;accept&#39;</span><span class="p">,</span> <span class="s1">&#39;*/*;q=0.5, &#39;</span> <span class="o">+</span> <span class="nx">settings</span><span class="p">.</span><span class="nx">accepts</span><span class="p">.</span><span class="nx">script</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">rails</span><span class="p">.</span><span class="nx">fire</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="s1">&#39;ajax:beforeSend&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nx">xhr</span><span class="p">,</span> <span class="nx">settings</span><span class="p">]);</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">element</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;ajax:success&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">]);</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">complete</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">xhr</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">element</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;ajax:complete&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nx">xhr</span><span class="p">,</span> <span class="nx">status</span><span class="p">]);</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">xhr</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">element</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;ajax:error&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nx">xhr</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">error</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以基于UJS我们可以这样直接在<code>form</code>元素上绑定上对应的Ajax提交处理代码</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#myform&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;ajax:success&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Post successfully:)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;ajax:error&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Post fail:(&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>UJS在Ajax表单提交了之后，还会将该表单中的<code>button</code>和<code>input[type='submit']</code>都加上<code>disable</code>属性，防止用户多次点击引发多次提交。</p>

<p>此外，UJS实现的Ajax Form上还有两个特殊的事件</p>

<ul>
<li><code>ajax:aborted:required</code> 当表单提交的时候，有未填的<code>input</code>标签时会触发这个事件，你可以选择去处理</li>
<li><code>ajax:aborted:file</code> 我们知道通过正常的方式是无法通过AJAX来提交文件的，当表单里包含了文件字段的时候，这个事件会被触发，在这里可以去实现自己的文件提交逻辑。比如<a href="https://github.com/JangoSteve/remotipart">remotipart</a>通过这个事件实现了Ajax Form的文件提交。</li>
</ul>


<h2>选择器</h2>

<p>UJS的所有功能都通过预设的选择器，绑定事件处理逻辑到对应元素上，以下是选择器的定义</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">rails</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Link elements bound by jquery-ujs</span>
</span><span class='line'>    <span class="nx">linkClickSelector</span><span class="o">:</span> <span class="s1">&#39;a[data-confirm], a[data-method], a[data-remote], a[data-disable-with]&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Button elements boud jquery-ujs</span>
</span><span class='line'>    <span class="nx">buttonClickSelector</span><span class="o">:</span> <span class="s1">&#39;button[data-remote]&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Select elements bound by jquery-ujs</span>
</span><span class='line'>    <span class="nx">inputChangeSelector</span><span class="o">:</span> <span class="s1">&#39;select[data-remote], input[data-remote], textarea[data-remote]&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Form elements bound by jquery-ujs</span>
</span><span class='line'>    <span class="nx">formSubmitSelector</span><span class="o">:</span> <span class="s1">&#39;form&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Form input elements bound by jquery-ujs</span>
</span><span class='line'>    <span class="nx">formInputClickSelector</span><span class="o">:</span> <span class="s1">&#39;form input[type=submit], form input[type=image], form button[type=submit], form button:not([type])&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Form input elements disabled during form submission</span>
</span><span class='line'>    <span class="nx">disableSelector</span><span class="o">:</span> <span class="s1">&#39;input[data-disable-with], button[data-disable-with], textarea[data-disable-with]&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Form input elements re-enabled after form submission</span>
</span><span class='line'>    <span class="nx">enableSelector</span><span class="o">:</span> <span class="s1">&#39;input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Form required input elements</span>
</span><span class='line'>    <span class="nx">requiredInputSelector</span><span class="o">:</span> <span class="s1">&#39;input[name][required]:not([disabled]),textarea[name][required]:not([disabled])&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Form file input elements</span>
</span><span class='line'>    <span class="nx">fileInputSelector</span><span class="o">:</span> <span class="s1">&#39;input[type=file]&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Link onClick disable selector with possible reenable after remote submission</span>
</span><span class='line'>    <span class="nx">linkDisableSelector</span><span class="o">:</span> <span class="s1">&#39;a[data-disable-with]&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这提供可配置对应选择器的机会，比方说使用某个jQuery插件，它通过<code>data-remote</code>去标记别的事情。那么在不修改这个插件的情况下想让UJS继续工作，我们可以重新配置UJS的选择器</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">rails</span><span class="p">.</span><span class="nx">formSubmitSelector</span> <span class="o">=</span> <span class="s1">&#39;form([data-ajax-form])&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>CSRF Token</h2>

<p>UJS还会在每次表单提交上自动附带上CSRF Token。Rails 3之后强制所有的非幂等HTTP请求需要带上CSRF token作安全校验，用来防止XSS攻击。这就要求开发者在每次写Ajax请求的时候，都需要手动把这部分的token带上，UJS也通过jQuery的<a href="http://api.jquery.com/jQuery.ajaxPrefilter/">ajaxPrefilter</a>接口，让每次的Ajax请求都自动附带上CSRF token。</p>

<p>另外，每次UJS初始化时，会为页面上所有表单都加上带有CSRF Token的隐藏<code>input</code>标签，让表单在提交时都能自动带上CSRF Token。</p>

<h2>从UJS学到了什么</h2>

<ul>
<li>jquery-ujs的所有事件绑定都是绑定在document，等到事件触发后再分发到对应的事件处理逻辑里，不需要在初始化时查找对应的元素并绑定事件</li>
<li>充分利用HTML5的<code>data</code>属性来解耦事件处理逻辑，将各种参数序列化到<code>data</code>属性</li>
<li>利用jQuery的自定义事件更好地定制自己的事件处理流程</li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="http://www.alfajango.com/blog/rails-3-remote-links-and-forms/">http://www.alfajango.com/blog/rails-3-remote-links-and-forms/</a></li>
<li><a href="http://www.alfajango.com/blog/rails-3-remote-links-and-forms-data-type-with-jquery/">http://www.alfajango.com/blog/rails-3-remote-links-and-forms-data-type-with-jquery/</a></li>
<li><a href="http://railscasts.com/episodes/205-unobtrusive-javascript">http://railscasts.com/episodes/205-unobtrusive-javascript</a></li>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/using-unobtrusive-javascript-and-ajax-with-rails-3/">http://net.tutsplus.com/tutorials/javascript-ajax/using-unobtrusive-javascript-and-ajax-with-rails-3/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActionView基本架构]]></title>
    <link href="http://kaichen.github.io/2013/08/10/actionview-architect"/>
    <updated>2013-08-10T09:43:00+08:00</updated>
    <id>http://kaichen.github.io/2013/08/10/actionview-architect</id>
    <content type="html"><![CDATA[<blockquote><p>本文是<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>的一部分, <a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>是由我正在编写的讲解Rails内部实现与设计的一本书, 欢迎阅读</p></blockquote>

<p><code>ActionView</code>是MVC中最后一公里, 将内容拼装完成, 等待服务器将其最终结果传输到用户端。</p>

<p><strong>注</strong> 下文中<code>ActionView</code>在作为命名空间时全部简写为<code>AV</code>。</p>

<p>在开发者的角度看来, <code>ActionView</code>的处理过程似乎没有太多值得一提的事情, 大部分情况下需要关心的只是某个Helper要传哪些参数进去。但实际其中ActionView完成的事情并不简单, 这里主要有4个步骤</p>

<ol>
<li>需要将路由生成方法和各种Helper方法绑定到渲染的上下文中, 并绑定在当前Controller中的实例变量</li>
<li>需要有对象负责知道怎么去找到对应的模版。Rails能做到的查找规则极为灵活, 可以查找某个对应Format（如json）, 对应Locale（如zh-CN）, 从文件系统或数据库里找到这个对应的模版。</li>
<li>找到了这个模版后, 需要知道怎样去编译这个模版。Ruby世界有很多的模板语言, 比如Erb, Builder, Haml和Slim等等, Rails需要找到对应的编译方式去编译它们。</li>
<li>将编译好的模版, 加上之前的渲染上下文, 拼装得到最后的结果。</li>
</ol>


<p>在Controller里调用到ActionView接口只有以下三个</p>

<ul>
<li>AV::Base 维护整个渲染过程的上下文(View Context)</li>
<li>AV::LookupContext 维护模版查找的上下文</li>
<li>AV::Renderer 渲染接口</li>
</ul>


<p>渲染的调用逻辑基本集中在<code>AbstractController::Rendering</code>这个模组, 下图为其中大概的逻辑关系</p>

<p><img src="http://kaichen.github.io/images/action_view_arch.png" alt="av" /></p>

<p>图中的View Context就是上文提到的<code>AV::Base</code>, View Assigns指的是在Controller中设置的各种实例变量。最后Controller通过调用<code>AV::Renderer#render</code>去渲染出最终的结果。</p>

<p>关于ActionView内部具体的各个机制会在后续章节中一一讲解。</p>

<h2>参考</h2>

<p>Rails Core Team里的<a href="https://twitter.com/josevalim">José Valim</a>可能是对ActionPack中大部分实现最为熟悉的人之一, 以下列出的书以及Presentation就讲到了这部分内容。</p>

<ul>
<li><a href="http://pragprog.com/book/jvrails2/crafting-rails-4-applications">Crafting Rails 4 Applications</a></li>
<li><a href="http://www.youtube.com/watch?v=TslkdT3PfKc">Rails Conf 2013 You&rsquo;ve got a Sinatra on your Rails by José Valim</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置Git Push策略]]></title>
    <link href="http://kaichen.github.io/2013/07/30/config-your-git-push-strategy"/>
    <updated>2013-07-30T17:42:00+08:00</updated>
    <id>http://kaichen.github.io/2013/07/30/config-your-git-push-strategy</id>
    <content type="html"><![CDATA[<p>我发现大部分人都没有配置过Git Push的策略, 但Git目前给出的默认策略并不是一个友好的机制。</p>

<p>先来看一下所有的Git Push的策略</p>

<ul>
<li>nothing 什么都不干（估计只是测试用的）</li>
<li>matching 本地所有的分支都Push上去, 只是默认的机制</li>
<li>upstream/tracking 当本地分支有upstream（也就是有对应的远程分支）时Push到对应的远程分支</li>
<li>simple 和upstream一样, 但不允许将本地分支提交到远程不一样名字的分支</li>
<li>current 把当前的分支Push到远程的同名分支</li>
</ul>


<p>Git 1.x的默认策略是<code>matching</code>, 在Git 2.0之后<code>simple</code>会成为新的默认策略。另外<code>tracking</code>是<code>upstream</code>的别名, 但已经被标记为deprecated。</p>

<p><code>matching</code>不友好之处在于我们的大部分情况都是同步本地的当前分支到远程，你会看到一长串的本地Branch（如果你本地有二三十个的话那就被刷屏了）。如果除了当前分支外的其他分支有新的内容的话，你会看到好多push fail的提示。</p>

<p><code>simple</code>这个选项是非常安全的选项, 至少能阻止新手误操作覆盖远程分支, 所以Git会在2.0时将其作为默认策略。</p>

<p>大部分情况我们想要做的只是Push当前的分支, 那么最适合的就是upstream。我们可以通过<code>git config</code>去配置采用<code>upstream</code>策略。具体的设置命令如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global push.default upstream
</span></code></pre></td></tr></table></div></figure>


<p>*注* 本文发布时最新的Git是1.8.3.x</p>

<p>参考</p>

<ul>
<li><a href="http://git-scm.com/docs/git-config">http://git-scm.com/docs/git-config</a></li>
<li><a href="https://www.kernel.org/pub/software/scm/git/docs/git-push.html">https://www.kernel.org/pub/software/scm/git/docs/git-push.html</a></li>
<li><a href="http://stackoverflow.com/questions/948354/git-push-current-branch">http://stackoverflow.com/questions/948354/git-push-current-branch</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写作 积累 快乐]]></title>
    <link href="http://kaichen.github.io/2013/07/28/write-more"/>
    <updated>2013-07-28T16:31:00+08:00</updated>
    <id>http://kaichen.github.io/2013/07/28/write-more</id>
    <content type="html"><![CDATA[<p>现在写独立博客的人越来越少, 大家都跑到新媒体上去发表自己的观点。我现在倾向于在独立博客上写, 能保持自己的节奏。现在还一直在创作着的独立博客写作者们, 比如<a href="http://blog.xdite.net/">XDite</a>, <a href="http://www.ruanyifeng.com/blog/">阮一峰的网络日志</a>和<a href="http://coolshell.cn/">酷壳</a>, 我都是非常佩服, 同时也非常羡慕他们有这么多的读者。</p>

<p>最近看到的一个博客<a href="http://www.cnblogs.com/me-sa/">坚强2002</a>, 作者在<a href="http://www.douban.com/group/topic/23688164/">豆瓣上发帖</a>说要坚持写出一千篇以上的Erlang学习笔记, 这也是非常值得敬佩的一个博客作者。</p>

<h2>目的</h2>

<p>最主要的目的, 正如我在<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>中写的, 是积累和沉淀, 在工作了这么些年后总想到能留下什么。</p>

<p>另外一个激发我去写出更多内容的是由于我的同事们, 由于我现在的情况, 会带着几个经验较浅的同事, 他们会遇到好多问题都是没接触过的, 而他们特别的好学, 都会刨根揭底地问我一些蛮细节的问题, 所以我希望能把我知道的知识传播出去，告诉更多人。</p>

<p>写作本身也是个锻炼, 锻炼如何理清思路, 如何清晰地表达。</p>

<p>写作是创作, 创作本身就是件快乐的事。上星期, 有读过我写的<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>的朋友, 接着在Gtalk上和我讨论其中的问题。我非常开心, 有人认真看过了我写出来的内容。</p>

<h2>历史</h2>

<p>我写独立博客的历史可以追溯到2008年, 那时还是买的<a href="http://dreamhost.com/">Dream Host</a>的服务器, 采用的和邮箱一样, chenk85.com 这个域名。但那时大部分其实还是流水账和一些翻译的内容。当时觉得翻译文章又能学到一些东西, 又能学习英语, 就做了比较多的这方面的事情。</p>

<p>后来工作之后, 没有太多时间花在写博客上, 直到六月份计划写<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>, 才慢慢地特意腾出时间来写博客。</p>

<p>当然我在公司的博客上也写了几篇文章</p>

<ul>
<li><a href="http://easyread.ly/blogs/cros-iframe-autoresize-via-postmessage">使用HTML5 postMessage处理跨域iFrame的高度自适应</a></li>
<li><a href="http://easyread.ly/blogs/qian-yi-redis-shu-ju-ku">迁移Redis数据库</a></li>
<li><a href="http://easyread.ly/blogs/chef">使用Chef自动化服务器配置</a></li>
</ul>


<h2>选题</h2>

<p>在工作了这么多年, 我的EverNote上也积累了上千份的笔记, 有好多的题目已经积累了材料可以写出来, 比如下面的这些</p>

<ul>
<li>电子书相关, 如豆瓣Web的实现, EPub及其他电子格式的处理</li>
<li>Git/Vim/Tmux等日常工具的心得</li>
<li>常用Ruby社区工具和Rubygem的用法, 设计与实现, 如Capistrano/Bundler</li>
<li>Redis Schema Design Patterns</li>
<li>冷门但有趣的Rubygem的介绍</li>
<li>Rack middleware教程</li>
<li>单页JavaScript应用开发</li>
<li>Dev-ops相关的介绍和教程</li>
<li>Firefox和Chrome插件开发</li>
<li>Rails社区大牛们的介绍以及八卦</li>
<li>&hellip;</li>
</ul>


<p>对于自己工作中用到但还不够熟悉的, 比如Android/iOS开发方面, 或者是我自己爱好但是没有太多实际经验的技术, 我不会贸然去写。我觉得写出内容来是有责任的, 如果你随便写写出来误导了别人, 是个非常大的罪过。</p>

<h2>速度</h2>

<p>目前我的博客写作速度很慢, 每篇文章至少要写3个小时以上。写<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>系列的时候, 每篇都要花上一整天的时间。即使本来就已经把脉络里清楚出来了, 重点也写下来了, 就是最终成文的时候, 为了表达上的顺畅和清晰, 需要不断地做修改, 这个过程占据最多的时间。</p>

<p>一些技术分析之类的文章, 把别人写出来的上千行代码总结成精简的原理不是件容易的事。我不喜欢大段贴代码, 在讲述某个事情时大段贴代码, 我觉得是写作者本身并不能用文字去浅显地说明这个中的道理, 甚至写作者本身就没弄明白。基于个中的难度, 写作就是件耗时的事情。</p>

<h2>学习写作</h2>

<p>我觉得写作是个技能, 也有科学的学习方法。我订了一个阅读列表, 帮助我学习如何写作</p>

<ul>
<li><a href="http://book.douban.com/subject/1433835/">The Elements of Style</a></li>
<li><a href="http://book.douban.com/subject/1020644/">金字塔原理</a></li>
<li><a href="http://book.douban.com/subject/10544265/">Technical Blogging</a></li>
<li><a href="http://book.douban.com/subject/3169024/">ProBlogger</a></li>
</ul>


<p>这里是这个<a href="http://book.douban.com/doulist/2642048/">豆列</a>。</p>

<h2>计划和目标</h2>

<p>对于如何去宣传自己写的内容, 我更希望的是有人看到我写出来的内容后, 自动地去扩散, 去告诉他们的朋友说这里的内容很好, 过来这里看一下。</p>

<p>我给自己订的写作目标是每周至少一篇, 这样一年就可以写出52篇。由于是定量的计划, 如果这周有什么事情, 下周一定会补上。</p>

<h2>感谢</h2>

<p>最后感谢<a href="http://weibo.com/venuscham">我老婆</a>, 她每周末都会牺牲一些让我陪她的时间给我写作。以及要感谢所有阅读我博客的读者们, 你们是我继续写作的巨大推动力。如果有什么问题, 请回复或私下联系我, <a href="https://twitter.com/_kaichen">Twitter</a>或者Gtalk(chenk85 AT gmail.com)都可以。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord 对象的拼装]]></title>
    <link href="http://kaichen.github.io/2013/07/26/assemble-ar-object"/>
    <updated>2013-07-26T20:12:00+08:00</updated>
    <id>http://kaichen.github.io/2013/07/26/assemble-ar-object</id>
    <content type="html"><![CDATA[<blockquote><p>本文是<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>的一部分，<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>是由我正在编写的讲解Rails内部实现与设计的一本书，欢迎阅读</p></blockquote>

<p>Rails开发者们写得最多的逻辑，一般在Model这一级, 很多时候就是在操作ActiveRecord对象。这些对象是怎样构造拼装出来的,  它们持有哪些状态，并且怎样持有状态的呢？这就是本文要讨论的内容。</p>

<p><strong>注意</strong> ActiveRecord对象, 在下文都简称为AR对象。</p>

<p>AR对象有两种状态, 要么是已经持久化, 要么还未持久化。它们只通过以下两个入口构造出来</p>

<ul>
<li>initialize</li>
<li>init_with</li>
</ul>


<p>查询的方式得到的结果AR对象, 都是已持久化状态的, 都通过<code>init_with</code>方法构造出来。它的入口基本来自于数据查询的源头<code>find_by_sql</code>方法</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">find_by_sql</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="n">binds</span> <span class="o">=</span> <span class="o">[]</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># 发送查询到数据库 bla bla bla</span>
</span><span class='line'>  <span class="n">result_set</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">record</span><span class="o">|</span> <span class="n">instantiate</span><span class="p">(</span><span class="n">record</span><span class="p">,</span> <span class="n">column_types</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的<code>instantiate</code>的实现是这么调用的, <code>class.allocate.init_with</code>, 即分配好内存后调用<code>init_with</code>方法构造出对象。</p>

<p>通过<code>new</code>或者是关联对象上的<code>build</code>方法构造出来AR对象, 即未持久化的, 都通过<code>initialize</code>方法构造出来。</p>

<p>这两个不同途径的最大不同就是得到的持久化状态不同。判断是否持久化通过<code>persisted?</code>方法来得到</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">persisted?</span>
</span><span class='line'>  <span class="o">!</span><span class="p">(</span><span class="n">new_record?</span> <span class="o">||</span> <span class="n">destroyed?</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在AR对象里持久化状态, 由一个名为<code>new_record</code>和一个名为<code>destroyed</code>的布尔型实例变量标记决定。在构造未持久化状态的对象时就是将<code>new_record</code>设置为true, 反之则是false。而无论哪种方式构造出来的对象, 它的<code>destroyed</code>标记都为false, 因为你不可能查询出一个不存在的AR对象, 也不可能创建还未持久化就被删除的AR对象。这个事实反映了<a href="http://www.martinfowler.com/eaaCatalog/activeRecord.html">ActiveRecord</a>这个模式的本质，即对象与数据库记录一一对应。</p>

<p>关于持久化状态的变更, 我们先来说说<code>destroyed</code>。<code>destroyed</code>这个标记, 它的状态变化只通过两个API能改变, <code>delete</code>和<code>destroy</code>（这里省略了<code>destory!</code>, 因为<code>destory!</code>也是调用的<code>destroy</code>的)。在AR对象里, 被标记为<code>destroyed</code>的对象不会马上消失, 只有离开了作用域后才会被回收。</p>

<p>接下来是<code>new_record</code>标记, 它的变更只通过<code>create_record</code>这个API。道理也很浅显, 只有这个对象被写入到数据库后才真正地摆脱new这种状态。而所有的比如<code>save</code>/<code>create</code>这些最外层的API调用的都是<code>create_record</code>。</p>

<p>当然除了持久化之外, AR对象还带上了许多其他的状态, 比如监控属性改变内容的状态, 上下文的事务状态, 是否只读状态等。AR对象出于效率考虑加上缓存, 比如关联对象的缓存, 属性的缓存等。这些状态, 无论怎么途径构建出来, 都会统一通过<code>init_internals</code>去做初始化。</p>

<p>AR对象, 为了实现两次查询出同一条数据库记录可以判等, 它还覆写了<code>==</code>以及<code>&lt;=&gt;</code>等方法, 全部将其改为对比模型类和数据的主键。也就是只要是同一个模型, 且数据库记录的主键是一致的, 则认为它们是等同的。</p>

<p>最后列出文中提到的几个API的所在模块</p>

<ul>
<li>ActiveRecord::Querying

<ul>
<li><code>initialize</code></li>
<li><code>init_with</code></li>
<li><code>init_internals</code></li>
<li><code>==</code> 和 <code>eql?</code></li>
<li><code>&lt;=&gt;</code></li>
</ul>
</li>
<li>ActiveRecord::Persistence

<ul>
<li><code>persisted?</code></li>
<li><code>instantiate</code></li>
<li><code>delete</code></li>
<li><code>destroy</code></li>
<li><code>create_record</code></li>
</ul>
</li>
<li>ActiveRecord::Querying

<ul>
<li><code>find_by_sql</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sass入门]]></title>
    <link href="http://kaichen.github.io/2013/07/23/getting-start-with-sass"/>
    <updated>2013-07-23T19:01:00+08:00</updated>
    <id>http://kaichen.github.io/2013/07/23/getting-start-with-sass</id>
    <content type="html"><![CDATA[<p>Sass是一个CSS方言, 通过编译器实现将Sass/Scss编译为CSS。</p>

<p><a href="http://sass-lang.com/">http://sass-lang.com/</a></p>

<p>Sass具有两种语法, 一种是靠缩进去实现层级关系的Sass, 和另一种和CSS一样通过大括号实现层级的Scss。</p>

<h2>特性</h2>

<h3>嵌套式语法</h3>

<p>啥也不说了, 看代码</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nt">header</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">line-height</span><span class="o">:</span> <span class="mi">3</span><span class="kt">em</span><span class="p">;</span>
</span><span class='line'>  <span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">font-weight</span><span class="o">:</span> <span class="no">bold</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种形式的代码，大大减少了CSS编写层级定义时重复性。</p>

<h3>变量</h3>

<p>Sass可以通过变量去提高样式的可维护性。比如我们一套样式里, 我们常常会使用同样的间距, 但这往往要写到每个具体的元素上, 而当需要做出修改的时候就特别痛苦, 需要在每个用到的地方都去修改, 还不能简单粗暴地使用文本替换, 因为你不知道哪些是我们需要修改的。这种情况使用变量就特别适合, 示例如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nv">$margin</span><span class="o">:</span> <span class="mi">16</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.main-content</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">padding</span><span class="o">:</span> <span class="nv">$margin</span><span class="p">;</span>
</span><span class='line'>  <span class="na">margin</span><span class="o">:</span> <span class="nv">$margin</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.sidebar</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">padding</span><span class="o">:</span> <span class="nv">$margin</span><span class="p">;</span>
</span><span class='line'>  <span class="na">margin</span><span class="o">:</span> <span class="nv">$margin</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>函数</h3>

<p>Sass内置了一些很实用的<a href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html">函数</a>, 它们为样式编写提供了计算能力, 比如我最喜欢的<a href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#lighten-instance_method">lighten</a>, 它能把给出的颜色转换为更亮的颜色。</p>

<p>函数的编写, 不仅可以使用Ruby, 也可以使用Sass本身, 比如下面是我最近写的一个函数</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@function</span> <span class="nt">opposite-position</span><span class="o">(</span><span class="err">$</span><span class="nt">direction</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">@if</span> <span class="nv">$direction</span> <span class="o">==</span> <span class="s2">&quot;left&quot;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@return</span> <span class="s2">&quot;right&quot;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">@else</span> <span class="nt">if</span> <span class="err">$</span><span class="nt">direction</span> <span class="o">==</span> <span class="s2">&quot;right&quot;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@return</span> <span class="s2">&quot;left&quot;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">@else</span> <span class="nt">if</span> <span class="err">$</span><span class="nt">direction</span> <span class="o">==</span> <span class="s2">&quot;bottom&quot;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@return</span> <span class="s2">&quot;top&quot;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">@else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@return</span> <span class="s2">&quot;bottom&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mixins</h3>

<p>Mixins的思路就是通过把一组样式绑定到一个名字上，然后某个层级样式可以复用这组样式。</p>

<p>这个功能是Sass最强大的功能, 这提供及其强大的代码抽象能力, 让我们可以更好地组织起庞大的样式代码。各种Sass框架就通过Mixins来开放出它们的功能。</p>

<h3>Import</h3>

<p>Sass通过Import的形式来管理样式间的依赖, 这就像是Node.js的require。通过这个我们就能把样式打包为一个文件, 并且清晰地定义好加载顺序。</p>

<h2>教程</h2>

<p>官方Reference</p>

<p><a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html">http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html</a></p>

<p>Sass缩进语法</p>

<p><a href="http://sass-lang.com/docs/yardoc/file.INDENTED_SYNTAX.html">http://sass-lang.com/docs/yardoc/file.INDENTED_SYNTAX.html</a></p>

<p>The Sass Way, 有分为不同阶段的文章</p>

<p><a href="http://thesassway.com/">http://thesassway.com/</a></p>

<p>组织Sass代码的方式</p>

<p><a href="http://thesassway.com/beginner/how-to-structure-a-sass-project">http://thesassway.com/beginner/how-to-structure-a-sass-project</a></p>

<p>应用</p>

<p>得益于Sass强大的抽象能力和扩展力, 许多的框架基于它开发出来</p>

<p>Compass是一个基于Sass开发的CSS Framework, 集成了许多实用的Mixins</p>

<p><a href="http://compass-style.org/">http://compass-style.org/</a></p>

<p>Twitter Bootstrap Sass, 使用Sass重写Bootstarp的项目</p>

<p><a href="https://github.com/thomas-mcdonald/bootstrap-sass">https://github.com/thomas-mcdonald/bootstrap-sass</a></p>

<p>方便处理Media Query的项目</p>

<p><a href="https://github.com/paranoida/sass-mediaqueries">https://github.com/paranoida/sass-mediaqueries</a></p>

<p>几个专门处理按钮样式的项目</p>

<ul>
<li><a href="https://github.com/ubuwaits/css3-buttons">https://github.com/ubuwaits/css3-buttons</a></li>
<li><a href="https://github.com/alexwolfe/Buttons">https://github.com/alexwolfe/Buttons</a></li>
</ul>


<p>还有许多Sass的项目, 这里再列出几个, 更多请自行上Github搜索</p>

<ul>
<li><a href="https://github.com/csswizardry/inuit.css">https://github.com/csswizardry/inuit.css</a></li>
<li><a href="https://github.com/GumbyFramework/Gumby">https://github.com/GumbyFramework/Gumby</a></li>
</ul>


<p>竞争对手有Less.js和Stylus, 对比介绍</p>

<ul>
<li><a href="https://gist.github.com/chriseppstein/674726">https://gist.github.com/chriseppstein/674726</a></li>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/sass-vs-less-vs-stylus-a-preprocessor-shootout/">http://net.tutsplus.com/tutorials/html-css-techniques/sass-vs-less-vs-stylus-a-preprocessor-shootout/</a></li>
<li><a href="http://coding.smashingmagazine.com/2011/09/09/an-introduction-to-less-and-comparison-to-sass/">http://coding.smashingmagazine.com/2011/09/09/an-introduction-to-less-and-comparison-to-sass/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Paths]]></title>
    <link href="http://kaichen.github.io/2013/07/12/rails-paths"/>
    <updated>2013-07-12T21:44:00+08:00</updated>
    <id>http://kaichen.github.io/2013/07/12/rails-paths</id>
    <content type="html"><![CDATA[<blockquote><p>本文是<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>的一部分，<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>是由我正在编写的讲解Rails内部实现与设计的一本书，欢迎阅读</p></blockquote>

<p>前面的章节提到Rails Engine实现了Rails中著名的<a href="http://en.wikipedia.org/wiki/Convention_over_configuration">Convention over Configuration</a>，其目的就在于统一有序地组织各种方面的代码。</p>

<p>而这个事情主要关心的就是加载路径，也就是让Rails能在对应的路径下找到相应的代码。Rails Engine对目录的配置代码主要如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># railties/lib/rails/engine/configuration.rb</span>
</span><span class='line'><span class="n">paths</span> <span class="o">=</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Paths</span><span class="o">::</span><span class="no">Root</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@root</span><span class="p">)</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;app&quot;</span><span class="p">,</span>                 <span class="n">eager_load</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">glob</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;app/assets&quot;</span><span class="p">,</span>          <span class="ss">glob</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;app/controllers&quot;</span><span class="p">,</span>     <span class="n">eager_load</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;app/helpers&quot;</span><span class="p">,</span>         <span class="n">eager_load</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;app/models&quot;</span><span class="p">,</span>          <span class="n">eager_load</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;app/mailers&quot;</span><span class="p">,</span>         <span class="n">eager_load</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;app/views&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;app/controllers/concerns&quot;</span><span class="p">,</span> <span class="n">eager_load</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;app/models/concerns&quot;</span><span class="p">,</span>      <span class="n">eager_load</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;lib&quot;</span><span class="p">,</span>                 <span class="n">load_path</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;lib/assets&quot;</span><span class="p">,</span>          <span class="ss">glob</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;lib/tasks&quot;</span><span class="p">,</span>           <span class="ss">glob</span><span class="p">:</span> <span class="s2">&quot;**/*.rake&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;config&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;config/environments&quot;</span><span class="p">,</span> <span class="ss">glob</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="si">}</span><span class="s2">.rb&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;config/initializers&quot;</span><span class="p">,</span> <span class="ss">glob</span><span class="p">:</span> <span class="s2">&quot;**/*.rb&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;config/locales&quot;</span><span class="p">,</span>      <span class="ss">glob</span><span class="p">:</span> <span class="s2">&quot;*.{rb,yml}&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;config/routes.rb&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;db&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;db/migrate&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;db/seeds.rb&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;vendor&quot;</span><span class="p">,</span>              <span class="n">load_path</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;vendor/assets&quot;</span><span class="p">,</span>       <span class="ss">glob</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'><span class="n">paths</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rails Application的<code>paths</code>是这样的:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># railties/lib/rails/application/configuration.rb</span>
</span><span class='line'><span class="vi">@paths</span> <span class="o">||=</span> <span class="k">begin</span>
</span><span class='line'>  <span class="n">paths</span> <span class="o">=</span> <span class="k">super</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;config/database&quot;</span><span class="p">,</span>    <span class="ss">with</span><span class="p">:</span> <span class="s2">&quot;config/database.yml&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;config/environment&quot;</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="s2">&quot;config/environment.rb&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;lib/templates&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;log&quot;</span><span class="p">,</span>                <span class="ss">with</span><span class="p">:</span> <span class="s2">&quot;log/</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="si">}</span><span class="s2">.log&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;public&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;public/javascripts&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;public/stylesheets&quot;</span>
</span><span class='line'>  <span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;tmp&quot;</span>
</span><span class='line'>  <span class="n">paths</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>根目录</h2>

<p>目录结构配置是在Rails Engine定义的，这里最终得到的paths是每个Engine的根目录，而<code>Rails.root</code>是来自最顶层的Rails Application的根目录。这里Rails对根目录的判断，在Engine和Application的不一样，Application是通过检查存在<code>config.ru</code>文件的目录，而Engine只是查找存在<code>lib</code>目录的目录。</p>

<h2>路径集合</h2>

<p>在上面的配置代码里的<code>paths.add</code>会做两件事情，一是将传进来的字符串定义为<strong>一组路径</strong>，二是将对应的字符串作为这组路径的默认目录。这个Paths里的每一项。比如，在配置完成之后<code>paths["app/models"]</code>可以将这组路径里的所有目录都取回来。</p>

<p>也就是说每一组路径都是一个集合，而有些特殊的路径里只有一个文件，比如<code>paths["config/database"]</code>。在Rails内部在查找对应目录或文件的时候，都是通过这个<code>paths</code>去查找，而不是硬编码相对目录位置。</p>

<p>另外可以看到<code>paths.add</code>方法除了目录之外，还会接受一些选项</p>

<ul>
<li>eager_load: 是否使用预加载</li>
<li>glob: 目录内的文件查找通配符</li>
<li>with: 指定为唯一的文件</li>
<li>load_path: 作为<code>require</code>或<code>load</code>时候可以查找到的路径</li>
</ul>


<p>在了解完目录与加载的事实之后，你会知道Rails其实并不能控制你把Model放到<code>app/controllers</code>或其他地方下，它处理的只是把某些目录设置为查找代码的加载路径。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code loading of Rails]]></title>
    <link href="http://kaichen.github.io/2013/07/04/code-loading-of-rails"/>
    <updated>2013-07-04T23:03:00+08:00</updated>
    <id>http://kaichen.github.io/2013/07/04/code-loading-of-rails</id>
    <content type="html"><![CDATA[<blockquote><p>本文是<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>的一部分，<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>是由我正在编写的讲解Rails内部的实现与设计的一本书，欢迎阅读</p></blockquote>

<p>Ruby on Rails中实现了一套复杂的代码加载机制，比如怎样自动加载对应的模型，在开发模式
如何重新加载整个项目的代码，以及开发模式下的代码预加载。</p>

<h2>ActiveSupport::Dependencies</h2>

<p>本篇中讲到的Ruby on Rails的代码加载机制大部分实现代码都在<a href="https://github.com/rails/rails/blob/4-0-stable/activesupport/lib/active_support/dependencies.rb"><code>ActiveSupport::Dependencies</code></a>这个类中，这其中的实现逻辑算是比较复杂，我不想在这里贴满代码，在本篇中只是讲到实现机制以及对应的方法，请读者自行去看对应的代码。</p>

<p><code>ActiveSupport::Dependencies</code>这个类所在的文件被require时，就会自动进行初始化，以下是这个文件的最后一行代码。</p>

<p>ActiveSupport::Dependencies.hook!</p>

<p>我们可以先看看这个对应的<code>hook!</code>方法</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ActiveSupport::Dependencies</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hook!</span>
</span><span class='line'>  <span class="no">Object</span><span class="o">.</span><span class="n">class_eval</span> <span class="p">{</span> <span class="kp">include</span> <span class="no">Loadable</span> <span class="p">}</span>
</span><span class='line'>  <span class="no">Module</span><span class="o">.</span><span class="n">class_eval</span> <span class="p">{</span> <span class="kp">include</span> <span class="no">ModuleConstMissing</span> <span class="p">}</span>
</span><span class='line'>  <span class="no">Exception</span><span class="o">.</span><span class="n">class_eval</span> <span class="p">{</span> <span class="kp">include</span> <span class="no">Blamable</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>它就是将所需的各种Meta Programming挂到Object和Module下，以下就会一步步讲到对应的秘密。</p>

<h2>自动加载</h2>

<p>Ruby on Rails开发者一般不需关心这样一个问题，从来没有手动加载某个模型类或者控制器类，但为什么这个类可以直接使用呢？其中的秘密就是Rails使用了Ruby的其中一个Meta Programming功能，<code>const_missing</code>。所有的类和模组在Ruby里都是常量，当Ruby解析器在遇到没有见过的常量时，就会去调用对应上下文的<code>const_missing</code>方法。开启<code>const_missing</code>的地方就在前面看到加载到Module里的<code>ModuleConstMissing</code>模组中。</p>

<p>当Rails项目代码里遇到一个从来没有加载过的类或模组时，会调用
<code>Dependencies.load_missing_constant</code>方法去尝试利用之前章节提到的文件结构惯例加载对应代码。这个<code>load_missing_constant</code>的基本思路是，调用<code>Dependencies.search_for_file</code>方法去找到对应的文件，找到后通过<code>Dependencies.require_or_load</code>去加载。这过程其中需要将已经加载的所有内容都记录下来，以便对这个加载状态进行管理。</p>

<h2>开发模式的代码重新加载</h2>

<p>Rails的一个著名的功能就是在开发时，当你修改了某个文件后，Rails会帮你自动去重新加载对应的代码。</p>

<p>ActiveSupport里实现了一个名为FileUpdateChecker的类，可以监视文件变化，当文件被更
改的时候调用相应的逻辑。Rails通过这种方式去监视所有标记为<code>autoload</code>的目录下的文件，
当下一次请求过来时，在文件被修改的条件下会自动去进行重新加载。</p>

<p>而重新加载的机制，同样是利用Ruby语言的Meta Programming，通过<a href="http://www.ruby-doc.org/core-2.0/Module.html#method-i-remove_const">remove_const</a>去
把已经加载的类和模组都从内存中清空，这就让加载状态又回到了原点。虽然这个实现的思路很简单，但是由于Ruby里对于命名空间的处理是以嵌套的形式存在的，故需要循环遍历所有已加载的类和模组，并对其下的类和模组做深度遍历，最后将它们通通都清理。</p>

<p>这部分对应的代码入口如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ActiveSupport::Dependencies</span>
</span><span class='line'><span class="k">def</span> <span class="nf">clear</span>
</span><span class='line'>  <span class="n">log_call</span>
</span><span class='line'>  <span class="n">loaded</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>  <span class="n">remove_unloadable_constants!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，由于不是所有的代码都是通过这种自动加载的方法，那么利用<code>require</code>和<code>load</code>手动显式加载的。因此必须替换系统的<code>require</code>和<code>load</code>，以记录哪些代码已经被加载进来，实现之后的代码重载。这个就是最开始提到的<code>Dependenciese.hook!</code>里include到Object类中的<code>Loadable</code>模组做的事情。</p>

<h2>生产模式的代码预加载</h2>

<p>Rails在生产模式下，为了提高运行时的速度，去掉在处理请求时加载对应代码的延迟，所以会在
启动后把所有的业务代码都预先加载进来。它是通过如下的initializer来实现的，这个功能
通过<code>eager_load</code>的选项来控制。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Rails::Application::Finisher</span>
</span><span class='line'><span class="n">initializer</span> <span class="ss">:eager_load!</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">config</span><span class="o">.</span><span class="n">eager_load</span>
</span><span class='line'>    <span class="no">ActiveSupport</span><span class="o">.</span><span class="n">run_load_hooks</span><span class="p">(</span><span class="ss">:before_eager_load</span><span class="p">,</span> <span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">eager_load_namespaces</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:eager_load!</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果需要某个环境启用预加载的话，可以对应环境将这个<code>eager_load</code>选项打开。</p>

<h2>加载日志</h2>

<p>ActiveSupport::Dependencies内部的所有操作都是可以输出到日志，但默认情况Rails关闭了这部分日志，希望读者在读完这部分内容后去打开日志选项，去实际看看在你的项目中代码是怎样被加载的。打开的方法也很简单，在你的<code>config/application.rb</code>的Application类定义里加上这几行代码:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">after_initialize</span> <span class="k">do</span>
</span><span class='line'>  <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Dependencies</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span>
</span><span class='line'>  <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Dependencies</span><span class="o">.</span><span class="n">log_activity</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你在项目里引用了一些Rails Engine，由于前面章节所提到的Rails Engine与Rails Application的关系，Engine的MVC组件的加载也是通过同种方式进行，因此也能看到相应的Rails Engine里的日志。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你可能不知道的ActiveRecord Migration小技巧]]></title>
    <link href="http://kaichen.github.io/2013/06/19/activerecord-migration-tricks-and-tips"/>
    <updated>2013-06-19T10:22:00+08:00</updated>
    <id>http://kaichen.github.io/2013/06/19/activerecord-migration-tricks-and-tips</id>
    <content type="html"><![CDATA[<p>ActiveRecord的Migration是ActiveRecord用来维护RDBMS Schema的工具，
使开发者的机器和服务器上的Schema保持同步。其原理在于将每次对数据库的改动都保存为一个脚本，
并以改动内容以及时间戳命名防止重复。</p>

<p>以下我分享一些关于Migration的小技巧。</p>

<h2>say/say_with_time</h2>

<p>我们有时会在Migration里执行数据的改动或更新，而此时最好能在输出里打印一些对应的信息，或者记录下对应的代码的执行时间。</p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Migration.html#method-i-say">say</a>和
<a href="http://api.rubyonrails.org/classes/ActiveRecord/Migration.html#method-i-say_with_time">say_with_time</a>就是为了上述需求而诞生的。对比使用<code>puts</code>之类的方法的优点是，这类输出会带有缩进或对应的与
Migration各种API更一致的输出。</p>

<p>下次需要在Migration里输出点什么的话，请用<code>say</code>以及<code>say_with_time</code>吧。</p>

<h2>references/belongs_to</h2>

<p>很多时候我们会创建互相关联的表，这就需要在表里加入一些引用到其它表的外键字段，这时我们一般会以添加一个
integer类型的字段，并赋以对应的名字(一般为对应模型的单数形式再加上<code>_id</code>)。ActiveRecord提供了<a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-references">references</a>API帮助我们更快捷地处理这种情况。</p>

<p>这里列出文档中的一个非常好的例子，这个例子非常明显地体现了使用这个API的好处。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create_table</span> <span class="ss">:taggings</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:tag</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;index_taggings_on_tag_id&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:tagger</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:taggable</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="p">{</span> <span class="ss">default</span><span class="p">:</span> <span class="s1">&#39;Photo&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上的代码等价于下面较长的代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create_table</span> <span class="ss">:taggings</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:tag_id</span><span class="p">,</span> <span class="ss">:tagger_id</span><span class="p">,</span> <span class="ss">:taggable_id</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">string</span>  <span class="ss">:tagger_type</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">string</span>  <span class="ss">:taggable_type</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="s1">&#39;Photo&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">add_index</span> <span class="ss">:taggings</span><span class="p">,</span> <span class="ss">:tag_id</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;index_taggings_on_tag_id&#39;</span>
</span><span class='line'><span class="n">add_index</span> <span class="ss">:taggings</span><span class="p">,</span> <span class="o">[</span><span class="ss">:tagger_id</span><span class="p">,</span> <span class="ss">:tagger_type</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>此外，<code>references</code>这个API也被alias为更容易记住的<code>belongs_to</code>。</p>

<h2>change_table</h2>

<p>在Migration里提供了Schema操作的API都操作了两种形式，比如<code>add_column</code>和<code>column</code>。在<code>create_table</code>里
可以使用如<code>column</code>比较简短形式的API，这与Form Helper在Form Buildler里可以使用不带<code>_tag</code>后缀的API一致。</p>

<p>当我们需要去对同一个表做多次操作的时候，可以通过<code>change_table</code>来化简代码，在<code>change_table</code>的代码块中，
可以使用简短形式的API</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">change_table</span><span class="p">(</span><span class="ss">:suppliers</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">column</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">limit</span><span class="p">:</span> <span class="mi">60</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">remove</span> <span class="ss">:company_id</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>create_join_table/drop_join_table</h2>

<p>当我们使用多对多(has_and_belongs_to_many)关联时需要创建关联表，而关联Schema很简单，只是
需要把关联的两张表的ID字段分别记录下来，而其中涉及了ActiveRecord的命名规范。这时使用
<a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_join_table">create_join_table</a>这个API就能很方便地帮我们去处理命名的事情，
只需要将对应两个表的表名作为参数传进去。</p>

<p>对应的也有一个<a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_join_table">drop_join_table</a>API去帮我们删除这种关联表。</p>

<h2>change_column_default/change_column_null</h2>

<p>业务总是在不断变化的，有时数据库里一些字段可能会由非空改为允许为空，修改默认值。当你把这些规则放到数据库时就
需要修改对应的字段和数据。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">change_column_null</span><span class="p">(</span><span class="ss">:users</span><span class="p">,</span> <span class="ss">:nickname</span><span class="p">,</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'><span class="n">change_column_default</span><span class="p">(</span><span class="ss">:accounts</span><span class="p">,</span> <span class="ss">:authorized</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>change_column_default</code>会做两个事情，首先是把对应的字段填上指定的默认值，之后再修改Schema。</p>

<h2>reversible</h2>

<p>我们知道Migration提供了Up/Down两个方向，相当于do和undo。随着<code>change</code>API的流行，很多时候我们不会去写
up和down两个方法，但有时就是需要写两个方向的代码。比如下面这个例子，在添加了first_name和last_name两个字段
后，在up这个方法上需要从full_name字段提取出first_name和last_name，而down的方法又需要合并出full_name的数据，这就是<a href="http://api.rubyonrails.org/classes/ActiveRecord/Migration.html#method-i-reversible">reversible</a>的使用场景。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SplitNameMigration</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">reversible</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span><span class='line'>      <span class="no">User</span><span class="o">.</span><span class="n">reset_column_information</span>
</span><span class='line'>      <span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">u</span><span class="o">|</span>
</span><span class='line'>        <span class="n">dir</span><span class="o">.</span><span class="n">up</span>   <span class="p">{</span> <span class="n">u</span><span class="o">.</span><span class="n">first_name</span><span class="p">,</span> <span class="n">u</span><span class="o">.</span><span class="n">last_name</span> <span class="o">=</span> <span class="n">u</span><span class="o">.</span><span class="n">full_name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">dir</span><span class="o">.</span><span class="n">down</span> <span class="p">{</span> <span class="n">u</span><span class="o">.</span><span class="n">full_name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">u</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">u</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">u</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">revert</span> <span class="p">{</span> <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:full_name</span><span class="p">,</span> <span class="ss">:string</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>revert</h2>

<p>某些时候写反向的逻辑会比正向的逻辑好写一点，比如有时我们会用<code>unless</code>而不是<code>if</code>。Migration里的
<a href="http://api.rubyonrails.org/classes/ActiveRecord/Migration.html#method-i-revert">revert</a>方法就能提供这样的形式去编写数据库改动。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FixTLMigration</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">revert</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">create_table</span><span class="p">(</span><span class="ss">:horses</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:content</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="ss">:remind_at</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">create_table</span><span class="p">(</span><span class="ss">:apples</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:variety</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>同时<code>revert</code>这个方法也支持传入一个Migration的名字，其作用是执行该Migration的down方法，当某个Migration已经同步上代码库后，希望撤销这个Migration时特别有用。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;2012121212_tenderlove_migration&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FixupTLMigration</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">revert</span> <span class="no">TenderloveMigration</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">create_table</span><span class="p">(</span><span class="ss">:apples</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:variety</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>At the end</h2>

<p>最后，提示一下，以上的API有些在Rails 3.x中没有加入，在Rails 4.0上以上的API可以找到。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Internal Hierarchy]]></title>
    <link href="http://kaichen.github.io/2013/06/14/rails-internal-hierarchy"/>
    <updated>2013-06-14T21:19:00+08:00</updated>
    <id>http://kaichen.github.io/2013/06/14/rails-internal-hierarchy</id>
    <content type="html"><![CDATA[<blockquote><p>本文是<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>的一部分，<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>是由我正在编写的讲解Rails内部的实现与设计的一本书，欢迎阅读</p></blockquote>

<p>Rails 内部有清晰的层级结构，以实现Rails应用程序和Rails插件的配置以及初始化。</p>

<p><img src='http://kaichen.github.io/images/graphviz/g-a8120f3125874b4ee9b996faea11e8f1.svg'></p>

<p>如上图所示，所有Rails Application继承自Rails Engine，而Rails Engine继承自Railtie，这套继承体系的实现全部都封装在railties这个Rubygem里。值得一提的是，Railtie和Rails Engine的子类都是<a href="http://en.wikipedia.org/wiki/Singleton_pattern">Singleton</a>，Rails Application本身就是<a href="http://en.wikipedia.org/wiki/Singleton_pattern">Singleton</a>，所以在一个程序里Rails Application只有一个实例。</p>

<h2>Railtie</h2>

<p>我们先从Railtie说起，如果你翻查过一些Rails插件的源码，会发现它都继承了Railtie。Railtie位于层级里最低最底层的部分，它实现了配置和初始化这两大功能，其中的逻辑都组织在以下两个Modules中</p>

<ul>
<li>Initializable, 实现位于<code>rails/lib/rails/initializable</code></li>
<li>Configuration, 实现位于<code>rails/lib/rails/railtie/configuration</code></li>
</ul>


<p>Initializable 模块顾名思义就是负责初始化，常用的方法只有一个叫<code>initializer</code>的方法，它的方法签名如下，接受一个名字，一个可选的参数，一个代码块</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">initializer</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">opts</span> <span class="o">=</span> <span class="p">{},</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>定义好的 Initializer 代码块会在Rails应用程序启动时执行，并且可以在参数里指定<code>before</code>或者<code>after</code>选项，
让其在某个已定义的Initializer执行之前或之后执行，这个功能是通过<a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/tsort/rdoc/TSort.html">Ruby内置的TSort</a>实现的。以下是ActiveRecord设置Logger的Initializer</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">initializer</span> <span class="s2">&quot;active_record.logger&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">ActiveSupport</span><span class="o">.</span><span class="n">on_load</span><span class="p">(</span><span class="ss">:active_record</span><span class="p">)</span> <span class="p">{</span> <span class="nb">self</span><span class="o">.</span><span class="n">logger</span> <span class="o">||=</span> <span class="o">::</span><span class="no">Rails</span><span class="o">.</span><span class="n">logger</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Configuration 是实现常见的<code>config.xxx = yyy</code>这一常见写法的源头，它使用了Ruby的method_missing实现了配置参数的属性访问和设置，全部的配置都放在一个名为<code>@@options</code>的类变量里。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span> <span class="o">=~</span> <span class="sr">/=$/</span>
</span><span class='line'>    <span class="vc">@@options</span><span class="o">[</span><span class="vg">$`</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="vc">@@options</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vc">@@options</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Action Mailer, Action Controller, Action View和Active Record 它们集成到Rails框架的都是通过Railtie实现。</p>

<p>如果你去看现实中的各种插件写的Railtie中，基本上就是调用initializer方法配置初始化逻辑和通过config变量在添加自身相关的各种配置选项。而且Rails也使用这两个模块去设置各种框架本身的初始化和参数配置。</p>

<p>Railtie除此之外，它还负责rake tasks和generator等部分与Rails应用程序的集成，暂不讲。</p>

<h2>Rails Engine</h2>

<p>Rails Engine主要的设想就是把一些通用的Rails应用程序抽象出来并得到重用，也就是说每个Rails Engine几乎就是一个Rails应用程序，它拥有MVC结构，具有自己的路由，独立的Middleware Stack。社区里最广为人知的一个Rails Engine应该是<a href="https://github.com/plataformatec/devise">devise</a>。</p>

<p>Rails Engine中实现Rails广为人知的&ldquo;<a href="http://en.wikipedia.org/wiki/Convention_over_configuration">Convention over Configuration</a>&rdquo;特性，整套目录结构的加载就是在这里定义的。</p>

<p>Rails Engine是一个Rack Middleware，它实现了<code>call</code>方法，所以能Mount到其他Rails Engine或者Rails Application的路由上。</p>

<p>关于Rails的代码加载方式会在后续的章节详细讲解。</p>

<h2>Rails Application</h2>

<p>组织起Rails应用程序的启动流程，是Rails Application这个类最主要的事情。而Rails Application区别于Rails Engine在于需要管理很多外部的资源，比如以下的内容</p>

<ul>
<li><code>Rails.logger</code></li>
<li><code>Rails.cache</code></li>
<li>Session 的存储机制</li>
<li>维护完整Middleware Stack</li>
<li>代码重新加载</li>
<li>与Bundler的集成</li>
</ul>


<p>关于Rails的启动流程和Middleware Stack等话题会在后续的章节中展开并详细讲解。</p>

<p>本节暂时到此。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependencies of Rails]]></title>
    <link href="http://kaichen.github.io/2013/06/12/dependencies-of-rails"/>
    <updated>2013-06-12T21:43:00+08:00</updated>
    <id>http://kaichen.github.io/2013/06/12/dependencies-of-rails</id>
    <content type="html"><![CDATA[<blockquote><p>本文是<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>的一部分，<a href="http://kaichen.github.io/inspect-rails">Inspect Rails</a>是由我正在编写的讲解Rails内部的实现与设计的一本书，欢迎阅读</p></blockquote>

<p>我们平时安装Rails时，执行的是<code>gem install rails</code>，安装的Rubygem名称就叫rails，而
这个Rubygem其实只是个没有代码的Meta Gem，它的作用就是定义rails依赖的组件，从
rails的gemspec看到</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># rails.gemspec</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">add_dependency</span> <span class="s1">&#39;activesupport&#39;</span><span class="p">,</span> <span class="n">version</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">add_dependency</span> <span class="s1">&#39;actionpack&#39;</span><span class="p">,</span>    <span class="n">version</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">add_dependency</span> <span class="s1">&#39;activerecord&#39;</span><span class="p">,</span>  <span class="n">version</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">add_dependency</span> <span class="s1">&#39;actionmailer&#39;</span><span class="p">,</span>  <span class="n">version</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">add_dependency</span> <span class="s1">&#39;railties&#39;</span><span class="p">,</span>      <span class="n">version</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">add_dependency</span> <span class="s1">&#39;bundler&#39;</span><span class="p">,</span>         <span class="s1">&#39;&gt;= 1.3.0&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt; 2.0&#39;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">add_dependency</span> <span class="s1">&#39;sprockets-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0.0.rc4&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上的依赖声明说明了Rails依赖于哪些组件，首先有几个active或action打头的Rubygem</p>

<ul>
<li>activesupport, 对Ruby语言的一些扩展，Rails的所有核心组件都是依赖于它</li>
<li>actionpack, 包含了处理Web请求逻辑，包含了MVC中的Controller和View</li>
<li>activerecord, 以Active Record模式为基础的ORM</li>
<li>actionmailer, 包含邮件发送和接收逻辑</li>
<li>railties, 把以上的组件组合起来</li>
<li><a href="https://github.com/rails/sprockets-rails">sprockets-rails</a>, <a href="https://github.com/sstephenson/sprockets">Sprockets</a>的Rails
集成代码，Sprockets为Rails带来了著名的Assets Pipeline，Rails 3.1引入</li>
<li><a href="https://github.com/carlhuda/bundler">bundler</a>, 管理依赖Rubygem的版本</li>
</ul>


<p>除了Bundler和sprockets-rails外的几个Act***框架都是放在
<a href="https://github.com/rails/rails">Rails的Repo</a>里，还有以下介绍的大部分***-rails
的Rails与其它库的集成都是放在<a href="https://github.com/rails">Rails的Github账号</a>下的，
如sprockets-rails。</p>

<p>当然，各个组件还引用了其它的依赖</p>

<ul>
<li><a href="https://github.com/jimweirich/builder">builder</a>, 创建XML数据的DSL</li>
<li><a href="https://github.com/rack/rack">rack</a>, Ruby的Web Server接口，我们知道Rails是
一个基于Rack的Web框架</li>
<li><a href="https://github.com/brynary/rack-test">rack-test</a>, rack的测试框架</li>
<li><a href="https://github.com/kwatch/erubis">erubis</a>, 最快的ERB渲染引擎</li>
<li><a href="https://github.com/rails/arel">arel</a>, 基于关系代数的SQL生成框架</li>
<li><a href="https://github.com/jimweirich/rake">rake</a>, 不解释</li>
<li><a href="https://github.com/wycats/thor">thor</a>, rake的替代品，在Rails中只用到了Thor的
文件操作功能去构建Generator</li>
</ul>


<p><a name='req-deps' href='#req-deps'></a></p>

<h2>必要组件</h2>

<p>Rails在gemspec里声明是核心组件，但并非是必要的组件，比如Assets Pipeline，
ActiveRecord和AtionMailer不是一定需要包含在你的Rails Application里。</p>

<p>Rails 应用程序首先必须是个Rails Application，所以需要railites去维护整个程序的
加载和目录结构等。除此以外，Rails是个Web Framework，所以actionpack也是其必要的
组件之一。剩下的一个必要组件是，ActiveSupport，所有组件的必要依赖。</p>

<p><a name='opt-deps' href='#opt-deps'></a></p>

<h2>可选组件</h2>

<p>AcitveRecord，在Rails 3之后属于可替换的组件。由于在Actionpack里如Routing和Form
Helper严重依赖于ActiveRecord，所以Rails Core Team就抽象出了ActiveModel去解开
这个依赖，将Routing和Form Helper等需要调用到的部分，以Module的形式定义好接口，
只要包含或者实现了ActiveModel接口就能完美地与ActionPack协作。</p>

<p>ActionMailer，不是所有的Rails应用都有发邮件的需求，显然这不是必要的组件。</p>

<p>Sprockets，为Rails提供Assets Pipeline功能，但并不是所有人都喜欢它。在Rails应用
生成器里也提供了这个选项，去掉Assets Pipeline功能。</p>

<p>Test::Unit，Rails默认的测试框架，但由于Test::Unit是Ruby语言自带的，当开发者不想
直接使用它的时候，Rails只是关闭相关的代码生成器。另外，其他任何的测试框架都只是
Test::Unit的包装，添加了Syntax Sugar而已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://kaichen.github.io/2013/06/08/hello-octopress"/>
    <updated>2013-06-08T23:06:00+08:00</updated>
    <id>http://kaichen.github.io/2013/06/08/hello-octopress</id>
    <content type="html"><![CDATA[<p>开始使用<a href="http://octopress.org/">Octopress</a> Blog Engine，加上<a href="https://github.com/lucaslew/whitespace">whitespace</a>
这个Theme。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Got a HHKB Pro2]]></title>
    <link href="http://kaichen.github.io/2012/08/01/got-a-hhkb-pro2"/>
    <updated>2012-08-01T00:00:00+08:00</updated>
    <id>http://kaichen.github.io/2012/08/01/got-a-hhkb-pro2</id>
    <content type="html"><![CDATA[<p>本文写在<a href="http://en.wikipedia.org/wiki/Happy_Hacking_Keyboard">HHKB</a>入手3个月后，觉着要使用一段时间之后才能写出比较客观的感受。这个键盘是在<a href="http://weibo.com/2051369563/ye9QmzIwW">4月11日</a>老婆偷偷买了送给我的。</p>

<p>这是刚买来时的样子</p>

<p><img src="http://ww3.sinaimg.cn/bmiddle/7a456a5bjw1drw179o1apj.jpg" alt="My Keyboard" /></p>

<h2>HHKB</h2>

<p>HHKB是Happy Hacking Keyboard的缩写，PFU出品，HHKB系列只有三种型号，HHKB
Pro2 Type-S，HHKB Pro2和HHKB
Lite2。其中Type-S的价格要比普通的Pro2再贵个1K左右。</p>

<p>值得一提的是HHKB Pro2是静电电容键盘，而HHKB
Lite2是薄膜键盘，都并非是机械键盘。</p>

<h2>外形</h2>

<p>这个是个白色无刻的键盘，我理想中的HHKB只有白色无刻和黑色同刻这两款，就觉得这两款感觉上非常Cool，一让人看到就有种装X的感觉。在连接方面，键盘带了一根可以拆卸的USB连接线。</p>

<h2>键位布局</h2>

<p>由于HHKB的键位布局和一般的键盘有比较大的差异，再加上无刻，刚使用那段时间有点不适应。</p>

<p>一开始最不适应的有两个地方，数字键上的符号，和<code>~</code>移到键盘最右上角。<code>~</code>和<code>|</code>很快能习惯。以前一直是看着符号来按的，用了这个无刻的键盘经常会按错。但经过一段时间的使用，手指的肌肉已经记住了每个数字键和符号的位置。</p>

<p>而很早之前我就是把Cap lock设置为Control，HHKB上原生的这种Unix的键位设置对我来说更是如鱼得水。Control加上Esc的位置让我这个<a href="https://bitbucket.org/kaichen/vimrc">Vim的重度用户</a>用起来非常的舒服。</p>

<p>这么几个月使用下来，由于完全不用低头看键盘（无刻看了也没用），所以输入效率着实提高了不少。</p>

<h2>手感</h2>

<p>手感很软，估计相当于红轴的机械键盘（试过<a href="https://plus.google.com/100461408096595815099">同事</a>的红轴键盘），所以手指不需要怎么发力。另外是键程比较长，按键的回弹力量刚刚好，所以打字的段落感和节奏感非常好。长时间使用下来，对比以前的打字经验，在速度快的时候敲击的错误率降低。这里的错误是输入的键在一般键盘上顺序就串了，比如rails很容易输错为rials，但HHKB上没有这样的情况，这让我感觉很神奇，也许这就是这个键盘的价值所在吧。</p>

<h2>其他</h2>

<p>HHKB对Mac的支持很好，支持跳线设置为Mac模式，以支持几个常用的功能键，Volume Up/Down和Mute。</p>

<p>这两天还败了个HHKB的专用包，理由是每天都背着这个键盘上下班，有时听到键盘在包里撞来撞去的声音有些心寒。这个包没现货需要订货，估计下星期能到手。</p>

<p>推荐大家在有经济能力的情况下可以败一个，毕竟真的能提高一些效率。当然这也就是个普通的键盘，对你基本的能力并没有提升，提高的只是输入的体验，让你把精力都focus在hacking上，达到这个键盘所称的境界，Happy Hacking。再次感谢我老婆，我自己是狠不下心买的。</p>

<p>最后附上网上的一篇比较好的HHKB的评测</p>

<ul>
<li><a href="http://cyher.net/peripherals/the-art-of-hhkb-pro-2">Happy Hacking keyboard pro 2的艺术</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instance Property of CoffeeScript]]></title>
    <link href="http://kaichen.github.io/2012/05/02/instance-property-of-coffeescript"/>
    <updated>2012-05-02T20:00:00+08:00</updated>
    <id>http://kaichen.github.io/2012/05/02/instance-property-of-coffeescript</id>
    <content type="html"><![CDATA[<p>用Class语法定义的Instance Property是直接append到prototype上，当
你把一个property定义为某个对象(非立即值)时，那所有的
Instance都会指向同一个内存地址上。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Foo</span>
</span><span class='line'>  <span class="nv">favSites: </span><span class="p">[</span><span class="s">&quot;Google&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>会编译得到：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Foo</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>  <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">favSites</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;Google&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Foo</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里容易犯错的地方就是当有实例去修改上面提到的共享
内存地址的内容，这样就会得到一个奇怪的结果。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">foo1 = </span><span class="k">new</span> <span class="nx">Foo</span>
</span><span class='line'><span class="nv">foo2 = </span><span class="k">new</span> <span class="nx">Foo</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo1</span><span class="p">.</span><span class="nx">favSites</span><span class="p">.</span><span class="nx">push</span> <span class="s">&quot;Github&quot;</span>
</span><span class='line'><span class="nx">alert</span> <span class="nx">foo2</span><span class="p">.</span><span class="nx">favSites</span> <span class="c1"># =&gt; [&quot;Google&quot;, &quot;Github&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>当不想出现这种情况时最好避免直接把Instance Property定义在
Class Contructor的prototype上。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Foo</span>
</span><span class='line'>  <span class="nv">constructor: </span><span class="nf">(@options = {}) -&gt;</span>
</span><span class='line'>    <span class="vi">@favSites = </span><span class="p">[</span><span class="s">&quot;Google&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">foo1 = </span><span class="k">new</span> <span class="nx">Foo</span>
</span><span class='line'><span class="nv">foo2 = </span><span class="k">new</span> <span class="nx">Foo</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo1</span><span class="p">.</span><span class="nx">favSites</span><span class="p">.</span><span class="nx">push</span> <span class="s">&quot;Github&quot;</span>
</span><span class='line'><span class="nx">alert</span> <span class="nx">foo2</span><span class="p">.</span><span class="nx">favSites</span> <span class="c1"># =&gt; [&quot;Google&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Backbonejs里也是这么处理的，比如在Model中，每个实例的所
有属性值(<code>attributes</code>)：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Model</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">attributes</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">defaults</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">attributes</span> <span class="o">||</span> <span class="p">(</span><span class="nx">attributes</span> <span class="o">=</span> <span class="p">{});</span>
</span><span class='line'>    <span class="err">#</span><span class="p">...</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">attributes</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_escapedAttributes</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">cid</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">uniqueId</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">changed</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_silent</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_pending</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="err">#</span><span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Resources Help You Fight with Older IEs]]></title>
    <link href="http://kaichen.github.io/2012/04/06/web-resources-help-you-fight-with-older-IE"/>
    <updated>2012-04-06T00:00:00+08:00</updated>
    <id>http://kaichen.github.io/2012/04/06/web-resources-help-you-fight-with-older-IE</id>
    <content type="html"><![CDATA[<p>Recently I have to fight with older version IE, that&rsquo;s really a
nightmare.</p>

<p>And then search some resources to fight with it.</p>

<ul>
<li><a href="http://www.sitepoint.com/10-fixes-for-ie6-problems/">http://www.sitepoint.com/10-fixes-for-ie6-problems/</a></li>
<li><a href="http://stylisticweb.com/design-tutorials/15-ie6-bugs-and-simple-solutions">http://stylisticweb.com/design-tutorials/15-ie6-bugs-and-simple-solutions</a></li>
<li><a href="http://css-tricks.com/ie-css-bugs-thatll-get-you-every-time/">http://css-tricks.com/ie-css-bugs-thatll-get-you-every-time/</a></li>
<li><a href="http://www.virtuosimedia.com/dev/css/ultimate-ie6-cheatsheet-how-to-fix-25-internet-explorer-6-bugs#understanding-hasLayout">http://www.virtuosimedia.com/dev/css/ultimate-ie6-cheatsheet-how-to-fix-25-internet-explorer-6-bugs#understanding-hasLayout</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[carrierwave-upyun配置多个不同buckets]]></title>
    <link href="http://kaichen.github.io/2012/04/02/use-multi-buckets-in-carrierwave-upyun"/>
    <updated>2012-04-02T00:00:00+08:00</updated>
    <id>http://kaichen.github.io/2012/04/02/use-multi-buckets-in-carrierwave-upyun</id>
    <content type="html"><![CDATA[<h1>背景</h1>

<p><a href="https://github.com/jnicklas/carrierwave/">carrierwave</a>是RubyOnRails社区中比较
流行的文件上传插件，<a href="https://github.com/nowa/carrierwave-upyun">carrierwave-upyun</a>
是集成<a href="https://github.com/nowa/carrierwave-upyun">upyun</a>服务的插件。</p>

<h1>把不同类型的文件存放到upyun不同的bucket上</h1>

<p>使用upyun时有个常见的需求就是把不同类型的图片分开放到不同的bucket当中，但在
carreirwave-upyun的文档当中并没有提到这点，只是给出了怎么配置全局参数的例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CarrierWave</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">storage</span> <span class="o">=</span> <span class="ss">:upyun</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">upyun_username</span> <span class="o">=</span> <span class="s2">&quot;xxxxxx&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">upyun_password</span> <span class="o">=</span> <span class="s1">&#39;xxxxxx&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">upyun_bucket</span> <span class="o">=</span> <span class="s2">&quot;my_bucket&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">upyun_bucket_domain</span> <span class="o">=</span> <span class="s2">&quot;my_bucket.files.example.com&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>解决</h1>

<p>而实际上，可以这么去做：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CoverUploader</span> <span class="o">&lt;</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:Uploader</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">storage</span> <span class="ss">:upyun</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">upyun_bucket</span> <span class="o">=</span> <span class="s2">&quot;my-covers&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AttachementUploader</span> <span class="o">&lt;</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:Uploader</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">storage</span> <span class="ss">:upyun</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">upyun_bucket</span> <span class="o">=</span> <span class="s2">&quot;my-attachements&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样简单地在Uploader里assign一下就可以解决问题。</p>

<h1>为什么以上的解决方法行得通？</h1>

<p>Carreirwave的各种Configuration都是通过这里的<code>add_config</code>方法加入的。代码可以看以下的链接</p>

<p><a href="https://github.com/jnicklas/carrierwave/blob/master/lib/carrierwave/uploader/configuration.rb#L75-L94">https://github.com/jnicklas/carrierwave/blob/master/lib/carrierwave/uploader/configuration.rb#L75-L94</a></p>

<p><code>add_config</code>为每个Uploader实例添加了直接访问Class variable的方法，Uploader中
的各种Configuration 项（比如这里的<code>upyun_bucket</code>）都是存储在Uploader的Class
中。</p>

<p>而所有默认的Configuration项都是存储在<code>CarrierWave::Uploader::Base</code>，所以在我们
自定义的Uploader可以通过<code>add_config</code>为我们加入的<a href="https://github.com/jnicklas/carrierwave/blob/master/lib/carrierwave/uploader/configuration.rb#L98-L92"><code>self.#{config_item}=</code></a>
去修改Configuration项。</p>

<p>也就是说Carrierwave一早就实现了这样的机制让不同的Uploader天生可以具有配置能力。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Weekly to fetch tech updates]]></title>
    <link href="http://kaichen.github.io/2012/03/11/use-weekly-to-fetch-tech-updates"/>
    <updated>2012-03-11T00:00:00+08:00</updated>
    <id>http://kaichen.github.io/2012/03/11/use-weekly-to-fetch-tech-updates</id>
    <content type="html"><![CDATA[<p>我现在获取技术更新的来源，从订阅各种RSS改为订阅各类Weekly Mail。</p>

<p>比起RSS，Weekly的优点不少：</p>

<ul>
<li>更少的噪音，订阅某个Blog或者News site的RSS往往附带很多噪音</li>
<li>更少的信息量，Weekly中已经是人工筛选过，更重要的信息</li>
<li>减少阅读时间，每周读几封Weekly比时不时就去看RSS花更少的时间</li>
<li>清理RSS，大大减少RSS的未阅读数量</li>
</ul>


<p>现在RSS里剩下的内容，只有名人和大牛的博客（如韩寒，云风等），或者没有相关Weekly的内容。</p>

<p>以下是我订阅的几个Weekly</p>

<ul>
<li>Ruby Weekly <a href="http://rubyweekly.com/">http://rubyweekly.com/</a></li>
<li>HTML5 Weekly <a href="http://html5weekly.com/">http://html5weekly.com/</a></li>
<li>JavaScript Weekly <a href="http://javascriptweekly.com/">http://javascriptweekly.com/</a></li>
<li>Coder Weekly <a href="http://coderweekly.com/">http://coderweekly.com/</a></li>
</ul>


<p>以上全部Weekly Mail都是免费的，<strong>值得一提的是前3份都是大牛 <a href="http://peterc.org/">Peter Cooper</a> 搞的</strong>。</p>

<p>另外我还订一个Hacker News的monthly，是将HN上热门的内容制作成精美的ebook，有PDF，iPad版的PDF，epub和mobi。订阅地址是，<a href="http://hackermonthly.com/">http://hackermonthly.com/</a>。这个是付费，一年$29。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play a HTTP toy server with EventMachine]]></title>
    <link href="http://kaichen.github.io/2012/01/08/play-a-http-toy-server-with-eventmachine"/>
    <updated>2012-01-08T00:00:00+08:00</updated>
    <id>http://kaichen.github.io/2012/01/08/play-a-http-toy-server-with-eventmachine</id>
    <content type="html"><![CDATA[<p><img src="http://www.faconneurs.enligne-fr.com/__/logos_clients/event_machine.JPG" alt="EventMachine" /></p>

<p><a href="https://github.com/eventmachine/eventmachine/wiki">EventMachine</a>是Ruby社区的<a href="http://en.wikipedia.org/wiki/Reactor_pattern">Reactor模式</a>的实现。</p>

<p>所谓<code>Reactor</code>模式，通过运行一个事件循环，将输入分发给对应的处理器，处理过程全权交给处理器，从而实现同时处理多个输入，是实现高并发的利器。几乎每个语言都有对应的实现，比如Pythong的<a href="http://twistedmatrix.com/trac/">Twisted</a>，最近很火的<a href="nodejs.org/">Node.js</a>。</p>

<p>这次我们通过实现一个简单的HTTP File server来探索EventMachine。</p>

<p>通过Rubygems可以安装它：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gem install eventmachine
</span></code></pre></td></tr></table></div></figure>


<h3>Beginning Sample</h3>

<p>我们先从一个简单的例子入手，以下代码实现了这样的一个服务器，打印发过来数据，并返回<code>Yike</code>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;eventmachine&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">TcpSample</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">receive_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;[</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">] receive </span><span class="si">#{</span><span class="n">data</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">send_data</span> <span class="s2">&quot;Yike</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">EM</span><span class="o">.</span><span class="n">run</span> <span class="k">do</span>
</span><span class='line'>  <span class="sx">%w{INT TERM}</span><span class="o">.</span><span class="n">each</span><span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="no">Signal</span><span class="o">.</span><span class="n">trap</span> <span class="n">s</span><span class="p">,</span> <span class="o">&amp;</span><span class="nb">proc</span><span class="p">{</span><span class="no">EM</span><span class="o">.</span><span class="n">stop_event_loop</span><span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">port</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;PORT&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="mi">8001</span>
</span><span class='line'>  <span class="n">host</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;HOST&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;127.0.0.1&quot;</span>
</span><span class='line'>  <span class="no">EM</span><span class="o">.</span><span class="n">start_server</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="no">TcpSample</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Server start on </span><span class="si">#{</span><span class="n">host</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">port</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>来解释几个EventMachine的API：</p>

<ul>
<li><a href="http://eventmachine.rubyforge.org/EventMachine.html#M000461">EM.run</a> 这个方法初始化并启动一个事件循环。</li>
<li><a href="http://eventmachine.rubyforge.org/EventMachine.html#M000469">EM.stop_event_loop</a> 这个方法顾名思义就是停止事件循环。在这段代码中我们注册了两个Signal，INT和TERM，用来在命令行用Ctrl-C停止程序。</li>
<li><a href="http://eventmachine.rubyforge.org/EventMachine.html#M000470">EM.start_server</a> 启动一个TCP服务器并监听传入参数的host和port，最后一个传入的参数是具体的行为逻辑实现，可以是Module或者是Class。</li>
</ul>


<p>代码中TcpSample module就是具体的Connection逻辑实现，只要实现几个由EventMachine Connection约定的方法，比如收发数据的<code>receive_data</code>和<code>send_data</code>。EventMachine会在运行过程事件被触发时回调Connection里的方法。具体关于EventMachine::Connection的文档请点击<a href="http://eventmachine.rubyforge.org/EventMachine/Connection.html">这里</a>。</p>

<p>我们可以用telnet来测试它：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>telnet 127.0.0.1 8001
</span><span class='line'>Trying 127.0.0.1...
</span><span class='line'>Connected to localhost.
</span><span class='line'>Escape character is <span class="s1">&#39;^]&#39;</span>.
</span><span class='line'>hey
</span><span class='line'>Yike
</span></code></pre></td></tr></table></div></figure>


<p>第一个简单的例子就这样演示完成了，继续下一步。</p>

<h3>Toy File Server</h3>

<p>接着步入正题，实现HTTP File Server。一句话来解释HTTP服务器做的事情，就是解析来自客户的Request，然后依照请求生成Response。这里的演示代码如题目所示，只是个Toy，按照请求返回静态文件。</p>

<p>首先需要接受并解析Request。EventMachine已经附带了<a href="http://eventmachine.rubyforge.org/EventMachine/Protocols.html">好几种Protocol的解析</a>，其中包括实现了HTTP的<a href="http://eventmachine.rubyforge.org/EventMachine/Protocols/HeaderAndContentProtocol.html">HeaderAndContentProtocol</a>。注意这里的各种Protocol实现都是继承第一个例子中讲到EventMachine::Connection，并为各自的协议包装了一个<code>receive_xxx</code>的回调方法，HeaderAndContentProtocol的回调方法名为<code>receive_request</code>。我们的HTTP Toy要做的就是继承<code>HeaderAndContentProtocol</code>，在<code>receive_request</code>方法中实现File Server的逻辑。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HTTPToy</span> <span class="o">&lt;</span> <span class="ss">EM</span><span class="p">:</span><span class="ss">:P</span><span class="o">::</span><span class="no">HeaderAndContentProtocol</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">receive_request</span> <span class="n">headers</span><span class="p">,</span> <span class="n">content</span>
</span><span class='line'>    <span class="c1">#TODO ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>先来完成HTTP Headers的解析：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">REGEX</span> <span class="o">=</span> <span class="sr">/\A(?&lt;request_method&gt;\w+) (?&lt;full_path&gt;\S+) HTTP\/(?&lt;version&gt;[\d.]+)\Z/</span>
</span><span class='line'><span class="k">def</span> <span class="nf">parse_request</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{}</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">req</span><span class="o">|</span>
</span><span class='line'>    <span class="n">matched</span> <span class="o">=</span> <span class="no">REGEX</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">headers</span><span class="o">.</span><span class="n">shift</span><span class="p">)</span>
</span><span class='line'>    <span class="n">req</span><span class="o">[</span><span class="s2">&quot;request_method&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="n">matched</span><span class="o">[</span><span class="ss">:request_method</span><span class="o">]</span>
</span><span class='line'>    <span class="n">req</span><span class="o">[</span><span class="s2">&quot;full_path&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="n">matched</span><span class="o">[</span><span class="ss">:full_path</span><span class="o">]</span>
</span><span class='line'>    <span class="n">req</span><span class="o">[</span><span class="s2">&quot;http_version&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="n">matched</span><span class="o">[</span><span class="ss">:version</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着实现Callback方法<code>receive_request</code>，主要的逻辑是查找文件和拼装Response并返回：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">receive_request</span> <span class="n">headers</span><span class="p">,</span> <span class="n">content</span>
</span><span class='line'>  <span class="vi">@request</span> <span class="o">=</span> <span class="n">parse_headers</span><span class="p">(</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>  <span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;.&quot;</span> <span class="o">+</span> <span class="vi">@request</span><span class="o">[</span><span class="s2">&quot;full_path&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@request</span><span class="o">[</span><span class="s2">&quot;full_path&quot;</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>    <span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;./index.html&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="no">File</span><span class="o">.</span><span class="n">file?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="n">serve_file</span> <span class="n">filename</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">respond_not_found</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>  <span class="n">close_connection_after_writing</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">serve_file</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="n">extname</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="n">send_headers</span> <span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                 <span class="s2">&quot;html&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/html&quot;</span><span class="p">,</span>
</span><span class='line'>                 <span class="s2">&quot;js&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;application/x-javascript&quot;</span><span class="p">,</span>
</span><span class='line'>                 <span class="s2">&quot;css&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/css&quot;</span>
</span><span class='line'>               <span class="p">}(</span><span class="n">extname</span><span class="p">)</span>
</span><span class='line'>  <span class="n">send_data</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">send_headers</span><span class="p">(</span><span class="n">more</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="n">request</span><span class="o">[</span><span class="s2">&quot;status&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="n">more</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;status&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="s2">&quot;200 OK&quot;</span>
</span><span class='line'>  <span class="n">headers</span> <span class="o">=</span> <span class="s2">&quot;HTTP/1.1 </span><span class="si">#{</span><span class="n">request</span><span class="o">[</span><span class="s1">&#39;status&#39;</span><span class="o">]</span><span class="si">}</span><span class="se">\r\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">more</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># the magic string &quot;+8000&quot; means my life is at HARD MODE</span>
</span><span class='line'>    <span class="s2">&quot;Date&quot;</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%a, %d %b %Y %H:%m:%S +8000&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="s2">&quot;Server&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;my-http-toy&quot;</span>
</span><span class='line'>  <span class="p">}</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">more</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">more</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>    <span class="n">more</span><span class="o">.</span><span class="n">each</span><span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">headers</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">k</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="se">\r\n</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">send_data</span> <span class="n">headers</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码的<code>close_connection_after_writing</code>方法也是EventMachine的API之一，文档在<a href="http://eventmachine.rubyforge.org/EventMachine/Connection.html#M000286">这里</a>。这个方法会等待<code>send_data</code>的完成再把与客户端之间的连接关闭。上述大段代码的作用就是读文件并用<code>send_data</code>返回。</p>

<p>把它跑起来并通过浏览器可以测试一下它：</p>

<p><img src="http://dl.dropbox.com/u/1080383/screenshot-my-http-toy.png" alt="screenshot" /></p>

<p>查看完整的实现代码请点击<a href="http://gist.github.com/1580890">这里</a>。</p>

<h3>Benchmark</h3>

<p>最后来对比异步IO和同步的IO效率相差有多大，和本文实现的简单http file server对比的是Rack。用Rack来做对比是因为它几乎是最小最快的HTTP File server实现。代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># file: config.ru</span>
</span><span class='line'><span class="n">run</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:File</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>压力测试用的是<a href="http://www.hpl.hp.com/research/linux/httperf/">HTTPerf</a>，作为测试Fixture的是一个名为index.html的小文件（47B）。</p>

<p>Rack的File middleware在并发超过350的情况就歇菜了：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rackup</span> <span class="o">.</span><span class="n">/config</span><span class="o">.</span><span class="n">ru</span> <span class="o">-</span><span class="nb">p</span> <span class="mi">8002</span>
</span><span class='line'><span class="err">$</span> <span class="n">httperf</span> <span class="o">--</span><span class="n">rate</span><span class="o">=</span><span class="mi">350</span> <span class="o">--</span><span class="n">timeout</span><span class="o">=</span><span class="mi">5</span> <span class="o">--</span><span class="n">num</span><span class="o">-</span><span class="n">conns</span><span class="o">=</span><span class="mi">350</span> <span class="o">--</span><span class="n">port</span><span class="o">=</span><span class="mi">8002</span> <span class="o">--</span><span class="n">uri</span><span class="o">=</span><span class="sr">/index.html</span>
</span><span class='line'>
</span><span class='line'><span class="sr">Total: connections 350 requests 350 replies 347 test-duration 1.978 s</span>
</span><span class='line'>
</span><span class='line'><span class="sr">Connection rate: 177.0 conn/s</span> <span class="p">(</span><span class="mi">5</span><span class="o">.</span><span class="mi">7</span> <span class="n">ms</span><span class="o">/</span><span class="n">conn</span><span class="p">,</span> <span class="o">&lt;=</span><span class="mi">26</span> <span class="n">concurrent</span> <span class="n">connections</span><span class="p">)</span>
</span><span class='line'><span class="no">Connection</span> <span class="n">time</span> <span class="o">[</span><span class="n">ms</span><span class="o">]</span><span class="p">:</span> <span class="n">min</span> <span class="mi">2</span><span class="o">.</span><span class="mi">1</span> <span class="n">avg</span> <span class="mi">68</span><span class="o">.</span><span class="mi">5</span> <span class="n">max</span> <span class="mi">1272</span><span class="o">.</span><span class="mi">6</span> <span class="n">median</span> <span class="mi">13</span><span class="o">.</span><span class="mi">5</span> <span class="n">stddev</span> <span class="mi">245</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="no">Connection</span> <span class="n">time</span> <span class="o">[</span><span class="n">ms</span><span class="o">]</span><span class="p">:</span> <span class="n">connect</span> <span class="mi">63</span><span class="o">.</span><span class="mi">6</span>
</span><span class='line'><span class="no">Connection</span> <span class="n">length</span> <span class="o">[</span><span class="n">replies</span><span class="o">/</span><span class="n">conn</span><span class="o">]</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mo">000</span>
</span><span class='line'>
</span><span class='line'><span class="no">Request</span> <span class="ss">rate</span><span class="p">:</span> <span class="mi">177</span><span class="o">.</span><span class="mi">0</span> <span class="n">req</span><span class="o">/</span><span class="n">s</span> <span class="p">(</span><span class="mi">5</span><span class="o">.</span><span class="mi">7</span> <span class="n">ms</span><span class="o">/</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'><span class="no">Request</span> <span class="n">size</span> <span class="o">[</span><span class="n">B</span><span class="o">]</span><span class="p">:</span> <span class="mi">72</span><span class="o">.</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>350个并发的请求用了接近2秒的时间，速度是177个连接每秒。接着再来测试我们的HTTPToy：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby ./httptoy.rb 8001
</span><span class='line'><span class="nv">$ </span>httperf --rate<span class="o">=</span>600 --timeout<span class="o">=</span>5 --num-conns<span class="o">=</span>600 --port<span class="o">=</span>8001 --uri<span class="o">=</span>/index.html
</span><span class='line'>
</span><span class='line'>Total: connections 600 requests 600 replies 600 <span class="nb">test</span>-duration 1.000 s
</span><span class='line'>
</span><span class='line'>Connection rate: 600.1 conn/s <span class="o">(</span>1.7 ms/conn, &lt;<span class="o">=</span>17 concurrent connections<span class="o">)</span>
</span><span class='line'>Connection <span class="nb">time</span> <span class="o">[</span>ms<span class="o">]</span>: min 0.4 avg 2.8 max 25.9 median 0.5 stddev 3.9
</span><span class='line'>Connection <span class="nb">time</span> <span class="o">[</span>ms<span class="o">]</span>: connect 0.2
</span><span class='line'>Connection length <span class="o">[</span>replies/conn<span class="o">]</span>: 1.000
</span><span class='line'>
</span><span class='line'>Request rate: 600.1 req/s <span class="o">(</span>1.7 ms/req<span class="o">)</span>
</span><span class='line'>Request size <span class="o">[</span>B<span class="o">]</span>: 72.0
</span></code></pre></td></tr></table></div></figure>


<p><strong>完胜</strong>，和前面的差距不是一星半点，一秒内响应600个连接。如果继续提高并发数，到了700以上我们的HTTPToy也会出现不稳定的情况（崩溃或连接失败）。</p>

<h3>Conclusion</h3>

<p>EventMachine应用的场景和Node.js基本一样，IO密集的高并发场景，比如</p>

<ul>
<li>Web Socket服务端，<a href="https://github.com/igrigorik/em-websocket">https://github.com/igrigorik/em-websocket</a></li>
<li>并发的HTTP Client，<a href="https://github.com/igrigorik/em-http-request">https://github.com/igrigorik/em-http-request</a></li>
<li>Proxy，<a href="https://github.com/igrigorik/em-proxy">https://github.com/igrigorik/em-proxy</a></li>
</ul>


<p>在生产环境中大量使用EventMachine公司就是<a href="www.postrank.com/">PostRank</a>，这个公司基于EventMachine开发了大量的框架和库，有兴趣可以点击<a href="https://github.com/igrigorik">igrigorik</a>和<a href="https://github.com/postrank-labs">postrank-labs</a>的Github帐号。</p>

<p>最后谈下EventMachine缺点，和其它的Reactor模式实现一样，对付CPU密集的应用不行，而且使用的库全部都必须是异步，不然会把Main Event Loop阻塞（其后果是处理速度大大降低）。而像Node.js程序里出现了大量Callback的情况，在EventMachine上会好一点。</p>

<p>本文中的运行环境是Mac OSX Lion，Ruby 1.9.3-p0。</p>
]]></content>
  </entry>
  
</feed>
