<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CoffeeScript | The Kai Way]]></title>
  <link href="http://kaichen.github.io/blog/categories/coffeescript/atom.xml" rel="self"/>
  <link href="http://kaichen.github.io/"/>
  <updated>2013-09-20T23:29:29+08:00</updated>
  <id>http://kaichen.github.io/</id>
  <author>
    <name><![CDATA[Kai Chen]]></name>
    <email><![CDATA[kaichenxyz@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Instance Property of CoffeeScript]]></title>
    <link href="http://kaichen.github.io/2012/05/02/instance-property-of-coffeescript"/>
    <updated>2012-05-02T20:00:00+08:00</updated>
    <id>http://kaichen.github.io/2012/05/02/instance-property-of-coffeescript</id>
    <content type="html"><![CDATA[<p>用Class语法定义的Instance Property是直接append到prototype上，当
你把一个property定义为某个对象(非立即值)时，那所有的
Instance都会指向同一个内存地址上。</p>

<p>{% codeblock lang:coffeescript %}
class Foo
  favSites: [&ldquo;Google&rdquo;]
{% endcodeblock %}</p>

<p>会编译得到：</p>

<p>{% codeblock lang:javascript %}
var Foo;</p>

<p>Foo = (function() {
  function Foo() {}
  Foo.prototype.favSites = [&ldquo;Google&rdquo;];
  return Foo;
})();
{% endcodeblock %}</p>

<p>这里容易犯错的地方就是当有实例去修改上面提到的共享
内存地址的内容，这样就会得到一个奇怪的结果。</p>

<p>{% codeblock lang:coffeescript %}
foo1 = new Foo
foo2 = new Foo</p>

<p>foo1.favSites.push &ldquo;Github&rdquo;
alert foo2.favSites # => [&ldquo;Google&rdquo;, &ldquo;Github&rdquo;]
{% endcodeblock %}</p>

<p>当不想出现这种情况时最好避免直接把Instance Property定义在
Class Contructor的prototype上。</p>

<p>{% codeblock lang:coffeescript %}
class Foo
  constructor: (@options = {}) ->
    @favSites = [&ldquo;Google&rdquo;]</p>

<p>foo1 = new Foo
foo2 = new Foo</p>

<p>foo1.favSites.push &ldquo;Github&rdquo;
alert foo2.favSites # => [&ldquo;Google&rdquo;]
{% endcodeblock %}</p>

<p>在Backbonejs里也是这么处理的，比如在Model中，每个实例的所
有属性值(<code>attributes</code>)：</p>

<p>{% codeblock lang:javascript %}
var Model = Backbone.Model = function(attributes, options) {
    var defaults;
    attributes || (attributes = {});
    #&hellip;
    this.attributes = {};
    this.<em>escapedAttributes = {};
    this.cid = </em>.uniqueId(&lsquo;c&rsquo;);
    this.changed = {};
    this.<em>silent = {};
    this.</em>pending = {};
    #&hellip;
}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
