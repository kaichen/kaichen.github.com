<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | The Kai Way]]></title>
  <link href="http://kaichen.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://kaichen.github.io/"/>
  <updated>2013-09-20T23:29:29+08:00</updated>
  <id>http://kaichen.github.io/</id>
  <author>
    <name><![CDATA[Kai Chen]]></name>
    <email><![CDATA[kaichenxyz@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActionView Safe Buffer]]></title>
    <link href="http://kaichen.github.io/2013/08/17/actionview-safe-buffer"/>
    <updated>2013-08-17T17:04:00+08:00</updated>
    <id>http://kaichen.github.io/2013/08/17/actionview-safe-buffer</id>
    <content type="html"><![CDATA[<blockquote><p>本文是<a href="/inspect-rails">Inspect Rails</a>的一部分, <a href="/inspect-rails">Inspect Rails</a>是由我正在编写的讲解Rails内部实现与设计的一本书, 欢迎阅读</p></blockquote>

<p>为了提高安全性，ActionView的模版在Rails 3中实现了名为SafeBuffer用来减少被<a href="http://en.wikipedia.org/wiki/Cross-site_scripting">XSS攻击</a>的风险。</p>

<h2>XSS攻击</h2>

<p>XSS，全称为Cross-site Scripting，中文叫跨站脚本攻击。这是通过对目标网页注入脚本（最常见是JavaScript，也可以是VBScript等），然后通过这段脚本来盗取用户cookies或做跨站提交等。</p>

<p>要防止这种攻击，Rails开发者必须非常小心地处理用户输入的内容，本篇讲到SafeBuffer就是帮助开发者减小被攻击的风险。</p>

<h2>HTML Safe</h2>

<p>在ActionView的Template中，默认的内容是HTML Unsafe的，HTML Unsafe的内容被拼接时会先用<code>ERB::Utils.html_escape</code>方法先处理一遍。只有两种才会被认为是HTML Safe的</p>

<ul>
<li>Numeric</li>
<li>AS::SafeBuffer的实例对象</li>
</ul>


<p>这里可能会让人出乎意料的是，SafeBuffer的实现放在ActiveSupport的String Extention里，具体定义文件在<code>active_support/core_ext/string/output_safety.rb
</code>。</p>

<p>SafeBuffer被定义为String的子类，与普通的String不同是SafeBuffer的<code>html_safe</code>属性为True。</p>

<p>{% codeblock lang:ruby %}
module ActiveSupport #:nodoc:
  class SafeBuffer &lt; String
    def initialize(*)
      @html_safe = true
      super
    end
    # other methods
  end
end
{% endcodeblock %}</p>

<p>另外，对于其他的对象，通过打开类的方式将Object的html_safe设置为False，而Numeric被设置为True。具体定义如下</p>

<p>{% codeblock lang:ruby %}
class Object
  def html_safe?
    false
  end
end</p>

<p>class Numeric
  def html_safe?
    true
  end
end
{% endcodeblock %}</p>

<p>我们知道String的内容是可变的，同样SafeBuffer的内容也是可变的。出于安全性考虑SafeBuffer会将产生新对象或修改内容本身的方法，比如<code>capitalize</code>，<code>gsub</code>等等，都替换为结果是HTML Unsafe的字符串</p>

<p>{% codeblock lang:ruby %}
class_eval &lt;&lt;-EOT, <strong>FILE</strong>, <strong>LINE</strong> + 1
  def #{unsafe_method}(<em>args, &amp;block)
    to_str.#{unsafe_method}(</em>args, &amp;block)
  end</p>

<p>  def #{unsafe_method}!(*args)
    @html_safe = false
    super
  end
EOT
{% endcodeblock %}</p>

<p>比如替换后的capistalize方法是</p>

<p>{% codeblock lang:ruby %}
def capitalize(<em>args, &amp;block)
  to_str.capitalize(</em>args, &amp;block)
end</p>

<p>def capitalize!(*args)
  @html_safe = false
  super
end
{% endcodeblock %}</p>

<p>稍微解释一下方法替换的意义，在非<a href="http://dablog.rubypal.com/2007/8/15/bang-methods-or-danger-will-rubyist">bang方法</a>中，先调用<code>to_str</code>就将原字符串转化为普通的String，由于除了SafeBuffer外的对象都是unsafe的，通过这么转化本来HTML Safe的内容又变回了HTML Unsafe的状态。</p>

<p>当需要将内容标记为html safe状态的时候，可以调用<code>html_safe</code>方法，这个方法的原理就是构造一个新的SafeBuffer对象，代码如下</p>

<p>{% codeblock lang:ruby %}
class String
  def html_safe
    ActiveSupport::SafeBuffer.new(self)
  end
end
{% endcodeblock %}</p>

<h2>接口</h2>

<p>基本上所有模版语言都放出了，一些回调接口让开发者可以替换掉原有的Buffer实现。ActionView里定义的Template Handler就完成了模版语言Buffer实现的替换，比如这里的<a href="https://github.com/rails/rails/blob/4-0-stable/actionpack/lib/action_view/template/handlers/erb.rb">对Erb的替换</a>。</p>

<p>一些第三方的模板语言，比如<a href="https://github.com/haml/haml">Haml</a>直接集成了SafeBuffer，<a href="https://github.com/slim-template/slim">Slim</a>通过其依赖的<a href="https://github.com/judofyr/temple">Temple</a>也集成了SafeBuffer。</p>

<h2>参考</h2>

<ul>
<li><a href="http://yehudakatz.com/2010/02/01/safebuffers-and-rails-3-0/">http://yehudakatz.com/2010/02/01/safebuffers-and-rails-3-0/</a></li>
<li><a href="http://www.railsdispatch.com/posts/security">http://www.railsdispatch.com/posts/security</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails ujs]]></title>
    <link href="http://kaichen.github.io/2013/08/16/rails-ujs"/>
    <updated>2013-08-16T23:06:00+08:00</updated>
    <id>http://kaichen.github.io/2013/08/16/rails-ujs</id>
    <content type="html"><![CDATA[<p>UJS是Rails 3引入的JavaScript框架与Rails的抽象层。我们知道Rails一些Helper是依赖于JavaScript框架的，比如Ajax Form，Ajax Link等，并且在Rails 3之前默认集成的JavaScript框架是<a href="http://prototypejs.org/">Prototype</a>，再这之后才换成了社区呼声很高的<a href="http://jquery.org/">jQuery</a>。</p>

<p>如前面所说UJS是个抽象层，它需要在每个框架上实现对应的接口，比如官方实现了<a href="https://github.com/rails/jquery-ujs">jquery-ujs</a>和<a href="https://github.com/rails/prototype-ujs">prototype-ujs</a>。本篇主要以<a href="https://github.com/rails/jquery-ujs">jquery-ujs</a>为例来讲解UJS。jquery-ujs代码很短，只有500行不到，想先浏览一下整个代码可访问<a href="https://github.com/rails/jquery-ujs/blob/master/src/rails.js">Github的jquery-ujs repo</a>。</p>

<h2>data-confirm</h2>

<p>先从最简单confirm例子入手。比如，在某些链接上让用户在点击链接后再次确认一次，我们一般会这么写</p>

<p>{% codeblock lang:ruby %}
link_to &ldquo;Visit Other Site&rdquo;, &ldquo;<a href="http://www.rubyonrails.org/">http://www.rubyonrails.org/</a>&rdquo;, data: { confirm: &ldquo;Are you sure?&rdquo; }
{% endcodeblock %}</p>

<p>这里和普通的链接不同的地方只是在于多加了一个<code>data-confirm</code>属性，然后UJS帮你实现了弹出确认框。这其中的实现方法很简单，写过jQuery的同学都会，就是监听所有链接的<code>click</code>事件，当这个被点击链接上有<code>data-confirm</code>属性时，取出<code>data-confirm</code>中的文本，弹出确认框，并根据用户的操作选择是否中断这个点击事件的处理。</p>

<h2>data-method</h2>

<p>然后我们来看看，另外一种比较常见的链接用法，让链接点击时使用非GET方法请求对应的URL，代码如下</p>

<p>{% codeblock lang:ruby %}
link_to(&ldquo;Sign Out&rdquo;, sign_out_path, method: :delete)
{% endcodeblock %}</p>

<p>这里传入的<code>method</code>参数，生成HTML时会被转换为<code>data-method="delete"</code>。与前面一个例子一样，UJS在这个链接的click事件上监听，当这个链接有<code>data-method</code>属性时，创建一个隐藏的<code>form</code>标签，并附带上名为<code>_method</code>参数，值为<code>data-method</code>属性值的<code>input</code>标签，最后将这个构造的表单提交。</p>

<p>通过这样的小技巧，Rails开发者就能通过<code>&lt;a&gt;</code>标签以任何想要的HTTP Method请求对应的链接。</p>

<h2>Ajax Form</h2>

<p>在Rails 3之后的<code>form_tag</code>和<code>form_for</code>上传入<code>remote: true</code>就能实现表单的Ajax提交，同样这个事情，UJS也是通过监听所有的Form标签的<code>submit</code>事件，然后检测标签上的<code>data-remote</code>属性来实现的。</p>

<p>对于开发者，在传入了<code>remote: true</code>之后要怎样去插入对应的Ajax处理器呢？UJS在对应Ajax提交阶段上触发了Rails自定义的<code>ajax:xxx</code>事件。</p>

<p>{% codeblock lang:javascript %}
beforeSend: function(xhr, settings) {
  if (settings.dataType === undefined) {
    xhr.setRequestHeader(&lsquo;accept&rsquo;, &lsquo;<em>/</em>;q=0.5, &rsquo; + settings.accepts.script);
  }
  return rails.fire(element, &lsquo;ajax:beforeSend&rsquo;, [xhr, settings]);
},
success: function(data, status, xhr) {
  element.trigger(&lsquo;ajax:success&rsquo;, [data, status, xhr]);
},
complete: function(xhr, status) {
  element.trigger(&lsquo;ajax:complete&rsquo;, [xhr, status]);
},
error: function(xhr, status, error) {
  element.trigger(&lsquo;ajax:error&rsquo;, [xhr, status, error]);
}
{% endcodeblock %}</p>

<p>所以基于UJS我们可以这样直接在<code>form</code>元素上绑定上对应的Ajax提交处理代码</p>

<p>{% codeblock lang:javascript %}
$(&ldquo;#myform&rdquo;).on(&ldquo;ajax:success&rdquo;, function () {
  alert(&ldquo;Post successfully:)&rdquo;)
}).on(&ldquo;ajax:error&rdquo;, function () {
  alert(&ldquo;Post fail:(&rdquo;)
})
{% endcodeblock %}</p>

<p>UJS在Ajax表单提交了之后，还会将该表单中的<code>button</code>和<code>input[type='submit']</code>都加上<code>disable</code>属性，防止用户多次点击引发多次提交。</p>

<p>此外，UJS实现的Ajax Form上还有两个特殊的事件</p>

<ul>
<li><code>ajax:aborted:required</code> 当表单提交的时候，有未填的<code>input</code>标签时会触发这个事件，你可以选择去处理</li>
<li><code>ajax:aborted:file</code> 我们知道通过正常的方式是无法通过AJAX来提交文件的，当表单里包含了文件字段的时候，这个事件会被触发，在这里可以去实现自己的文件提交逻辑。比如<a href="https://github.com/JangoSteve/remotipart">remotipart</a>通过这个事件实现了Ajax Form的文件提交。</li>
</ul>


<h2>选择器</h2>

<p>UJS的所有功能都通过预设的选择器，绑定事件处理逻辑到对应元素上，以下是选择器的定义</p>

<p>{% codeblock lang:javascript %}
$.rails = {
    // Link elements bound by jquery-ujs
    linkClickSelector: &lsquo;a[data-confirm], a[data-method], a[data-remote], a[data-disable-with]&rsquo;,</p>

<pre><code>// Button elements boud jquery-ujs
buttonClickSelector: 'button[data-remote]',

// Select elements bound by jquery-ujs
inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',

// Form elements bound by jquery-ujs
formSubmitSelector: 'form',

// Form input elements bound by jquery-ujs
formInputClickSelector: 'form input[type=submit], form input[type=image], form button[type=submit], form button:not([type])',

// Form input elements disabled during form submission
disableSelector: 'input[data-disable-with], button[data-disable-with], textarea[data-disable-with]',

// Form input elements re-enabled after form submission
enableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled',

// Form required input elements
requiredInputSelector: 'input[name][required]:not([disabled]),textarea[name][required]:not([disabled])',

// Form file input elements
fileInputSelector: 'input[type=file]',

// Link onClick disable selector with possible reenable after remote submission
linkDisableSelector: 'a[data-disable-with]'
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>这提供可配置对应选择器的机会，比方说使用某个jQuery插件，它通过<code>data-remote</code>去标记别的事情。那么在不修改这个插件的情况下想让UJS继续工作，我们可以重新配置UJS的选择器</p>

<p>{% codeblock lang:javascript %}
$.rails.formSubmitSelector = &lsquo;form([data-ajax-form])&rsquo;;
{% endcodeblock %}</p>

<h2>CSRF Token</h2>

<p>UJS还会在每次表单提交上自动附带上CSRF Token。Rails 3之后强制所有的非幂等HTTP请求需要带上CSRF token作安全校验，用来防止XSS攻击。这就要求开发者在每次写Ajax请求的时候，都需要手动把这部分的token带上，UJS也通过jQuery的<a href="http://api.jquery.com/jQuery.ajaxPrefilter/">ajaxPrefilter</a>接口，让每次的Ajax请求都自动附带上CSRF token。</p>

<p>另外，每次UJS初始化时，会为页面上所有表单都加上带有CSRF Token的隐藏<code>input</code>标签，让表单在提交时都能自动带上CSRF Token。</p>

<h2>从UJS学到了什么</h2>

<ul>
<li>jquery-ujs的所有事件绑定都是绑定在document，等到事件触发后再分发到对应的事件处理逻辑里，不需要在初始化时查找对应的元素并绑定事件</li>
<li>充分利用HTML5的<code>data</code>属性来解耦事件处理逻辑，将各种参数序列化到<code>data</code>属性</li>
<li>利用jQuery的自定义事件更好地定制自己的事件处理流程</li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="http://www.alfajango.com/blog/rails-3-remote-links-and-forms/">http://www.alfajango.com/blog/rails-3-remote-links-and-forms/</a></li>
<li><a href="http://www.alfajango.com/blog/rails-3-remote-links-and-forms-data-type-with-jquery/">http://www.alfajango.com/blog/rails-3-remote-links-and-forms-data-type-with-jquery/</a></li>
<li><a href="http://railscasts.com/episodes/205-unobtrusive-javascript">http://railscasts.com/episodes/205-unobtrusive-javascript</a></li>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/using-unobtrusive-javascript-and-ajax-with-rails-3/">http://net.tutsplus.com/tutorials/javascript-ajax/using-unobtrusive-javascript-and-ajax-with-rails-3/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActionView基本架构]]></title>
    <link href="http://kaichen.github.io/2013/08/10/actionview-architect"/>
    <updated>2013-08-10T09:43:00+08:00</updated>
    <id>http://kaichen.github.io/2013/08/10/actionview-architect</id>
    <content type="html"><![CDATA[<blockquote><p>本文是<a href="/inspect-rails">Inspect Rails</a>的一部分, <a href="/inspect-rails">Inspect Rails</a>是由我正在编写的讲解Rails内部实现与设计的一本书, 欢迎阅读</p></blockquote>

<p><code>ActionView</code>是MVC中最后一公里, 将内容拼装完成, 等待服务器将其最终结果传输到用户端。</p>

<p><strong>注</strong> 下文中<code>ActionView</code>在作为命名空间时全部简写为<code>AV</code>。</p>

<p>在开发者的角度看来, <code>ActionView</code>的处理过程似乎没有太多值得一提的事情, 大部分情况下需要关心的只是某个Helper要传哪些参数进去。但实际其中ActionView完成的事情并不简单, 这里主要有4个步骤</p>

<ol>
<li>需要将路由生成方法和各种Helper方法绑定到渲染的上下文中, 并绑定在当前Controller中的实例变量</li>
<li>需要有对象负责知道怎么去找到对应的模版。Rails能做到的查找规则极为灵活, 可以查找某个对应Format（如json）, 对应Locale（如zh-CN）, 从文件系统或数据库里找到这个对应的模版。</li>
<li>找到了这个模版后, 需要知道怎样去编译这个模版。Ruby世界有很多的模板语言, 比如Erb, Builder, Haml和Slim等等, Rails需要找到对应的编译方式去编译它们。</li>
<li>将编译好的模版, 加上之前的渲染上下文, 拼装得到最后的结果。</li>
</ol>


<p>在Controller里调用到ActionView接口只有以下三个</p>

<ul>
<li>AV::Base 维护整个渲染过程的上下文(View Context)</li>
<li>AV::LookupContext 维护模版查找的上下文</li>
<li>AV::Renderer 渲染接口</li>
</ul>


<p>渲染的调用逻辑基本集中在<code>AbstractController::Rendering</code>这个模组, 下图为其中大概的逻辑关系</p>

<p><img src="/images/action_view_arch.png" alt="av" /></p>

<p>图中的View Context就是上文提到的<code>AV::Base</code>, View Assigns指的是在Controller中设置的各种实例变量。最后Controller通过调用<code>AV::Renderer#render</code>去渲染出最终的结果。</p>

<p>关于ActionView内部具体的各个机制会在后续章节中一一讲解。</p>

<h2>参考</h2>

<p>Rails Core Team里的<a href="https://twitter.com/josevalim">José Valim</a>可能是对ActionPack中大部分实现最为熟悉的人之一, 以下列出的书以及Presentation就讲到了这部分内容。</p>

<ul>
<li><a href="http://pragprog.com/book/jvrails2/crafting-rails-4-applications">Crafting Rails 4 Applications</a></li>
<li><a href="http://www.youtube.com/watch?v=TslkdT3PfKc">Rails Conf 2013 You&rsquo;ve got a Sinatra on your Rails by José Valim</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord 对象的拼装]]></title>
    <link href="http://kaichen.github.io/2013/07/26/assemble-ar-object"/>
    <updated>2013-07-26T20:12:00+08:00</updated>
    <id>http://kaichen.github.io/2013/07/26/assemble-ar-object</id>
    <content type="html"><![CDATA[<blockquote><p>本文是<a href="/inspect-rails">Inspect Rails</a>的一部分，<a href="/inspect-rails">Inspect Rails</a>是由我正在编写的讲解Rails内部实现与设计的一本书，欢迎阅读</p></blockquote>

<p>Rails开发者们写得最多的逻辑，一般在Model这一级, 很多时候就是在操作ActiveRecord对象。这些对象是怎样构造拼装出来的,  它们持有哪些状态，并且怎样持有状态的呢？这就是本文要讨论的内容。</p>

<p><strong>注意</strong> ActiveRecord对象, 在下文都简称为AR对象。</p>

<p>AR对象有两种状态, 要么是已经持久化, 要么还未持久化。它们只通过以下两个入口构造出来</p>

<ul>
<li>initialize</li>
<li>init_with</li>
</ul>


<p>查询的方式得到的结果AR对象, 都是已持久化状态的, 都通过<code>init_with</code>方法构造出来。它的入口基本来自于数据查询的源头<code>find_by_sql</code>方法</p>

<p>{% codeblock lang:ruby %}
def find_by_sql(sql, binds = [])
  # 发送查询到数据库 bla bla bla
  result_set.map { |record| instantiate(record, column_types) }
end
{% endcodeblock %}</p>

<p>这里的<code>instantiate</code>的实现是这么调用的, <code>class.allocate.init_with</code>, 即分配好内存后调用<code>init_with</code>方法构造出对象。</p>

<p>通过<code>new</code>或者是关联对象上的<code>build</code>方法构造出来AR对象, 即未持久化的, 都通过<code>initialize</code>方法构造出来。</p>

<p>这两个不同途径的最大不同就是得到的持久化状态不同。判断是否持久化通过<code>persisted?</code>方法来得到</p>

<p>{% codeblock lang:ruby %}
def persisted?
  !(new_record? || destroyed?)
end
{% endcodeblock %}</p>

<p>在AR对象里持久化状态, 由一个名为<code>new_record</code>和一个名为<code>destroyed</code>的布尔型实例变量标记决定。在构造未持久化状态的对象时就是将<code>new_record</code>设置为true, 反之则是false。而无论哪种方式构造出来的对象, 它的<code>destroyed</code>标记都为false, 因为你不可能查询出一个不存在的AR对象, 也不可能创建还未持久化就被删除的AR对象。这个事实反映了<a href="http://www.martinfowler.com/eaaCatalog/activeRecord.html">ActiveRecord</a>这个模式的本质，即对象与数据库记录一一对应。</p>

<p>关于持久化状态的变更, 我们先来说说<code>destroyed</code>。<code>destroyed</code>这个标记, 它的状态变化只通过两个API能改变, <code>delete</code>和<code>destroy</code>（这里省略了<code>destory!</code>, 因为<code>destory!</code>也是调用的<code>destroy</code>的)。在AR对象里, 被标记为<code>destroyed</code>的对象不会马上消失, 只有离开了作用域后才会被回收。</p>

<p>接下来是<code>new_record</code>标记, 它的变更只通过<code>create_record</code>这个API。道理也很浅显, 只有这个对象被写入到数据库后才真正地摆脱new这种状态。而所有的比如<code>save</code>/<code>create</code>这些最外层的API调用的都是<code>create_record</code>。</p>

<p>当然除了持久化之外, AR对象还带上了许多其他的状态, 比如监控属性改变内容的状态, 上下文的事务状态, 是否只读状态等。AR对象出于效率考虑加上缓存, 比如关联对象的缓存, 属性的缓存等。这些状态, 无论怎么途径构建出来, 都会统一通过<code>init_internals</code>去做初始化。</p>

<p>AR对象, 为了实现两次查询出同一条数据库记录可以判等, 它还覆写了<code>==</code>以及<code>&lt;=&gt;</code>等方法, 全部将其改为对比模型类和数据的主键。也就是只要是同一个模型, 且数据库记录的主键是一致的, 则认为它们是等同的。</p>

<p>最后列出文中提到的几个API的所在模块</p>

<ul>
<li>ActiveRecord::Querying

<ul>
<li><code>initialize</code></li>
<li><code>init_with</code></li>
<li><code>init_internals</code></li>
<li><code>==</code> 和 <code>eql?</code></li>
<li><code>&lt;=&gt;</code></li>
</ul>
</li>
<li>ActiveRecord::Persistence

<ul>
<li><code>persisted?</code></li>
<li><code>instantiate</code></li>
<li><code>delete</code></li>
<li><code>destroy</code></li>
<li><code>create_record</code></li>
</ul>
</li>
<li>ActiveRecord::Querying

<ul>
<li><code>find_by_sql</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Paths]]></title>
    <link href="http://kaichen.github.io/2013/07/12/rails-paths"/>
    <updated>2013-07-12T21:44:00+08:00</updated>
    <id>http://kaichen.github.io/2013/07/12/rails-paths</id>
    <content type="html"><![CDATA[<blockquote><p>本文是<a href="/inspect-rails">Inspect Rails</a>的一部分，<a href="/inspect-rails">Inspect Rails</a>是由我正在编写的讲解Rails内部实现与设计的一本书，欢迎阅读</p></blockquote>

<p>前面的章节提到Rails Engine实现了Rails中著名的<a href="http://en.wikipedia.org/wiki/Convention_over_configuration">Convention over Configuration</a>，其目的就在于统一有序地组织各种方面的代码。</p>

<p>而这个事情主要关心的就是加载路径，也就是让Rails能在对应的路径下找到相应的代码。Rails Engine对目录的配置代码主要如下：</p>

<p>{% codeblock lang:ruby %}</p>

<h1>railties/lib/rails/engine/configuration.rb</h1>

<p>paths = Rails::Paths::Root.new(@root)
  paths.add &ldquo;app&rdquo;,                 eager_load: true, glob: &ldquo;<em>&rdquo;
  paths.add &ldquo;app/assets&rdquo;,          glob: &ldquo;</em>&rdquo;
  paths.add &ldquo;app/controllers&rdquo;,     eager_load: true
  paths.add &ldquo;app/helpers&rdquo;,         eager_load: true
  paths.add &ldquo;app/models&rdquo;,          eager_load: true
  paths.add &ldquo;app/mailers&rdquo;,         eager_load: true
  paths.add &ldquo;app/views&rdquo;
  paths.add &ldquo;app/controllers/concerns&rdquo;, eager_load: true
  paths.add &ldquo;app/models/concerns&rdquo;,      eager_load: true
  paths.add &ldquo;lib&rdquo;,                 load_path: true
  paths.add &ldquo;lib/assets&rdquo;,          glob: &ldquo;<em>&rdquo;
  paths.add &ldquo;lib/tasks&rdquo;,           glob: &ldquo;**/</em>.rake&rdquo;
  paths.add &ldquo;config&rdquo;
  paths.add &ldquo;config/environments&rdquo;, glob: &ldquo;#{Rails.env}.rb&rdquo;
  paths.add &ldquo;config/initializers&rdquo;, glob: &ldquo;<em><em>/</em>.rb&rdquo;
  paths.add &ldquo;config/locales&rdquo;,      glob: &ldquo;</em>.{rb,yml}&rdquo;
  paths.add &ldquo;config/routes.rb&rdquo;
  paths.add &ldquo;db&rdquo;
  paths.add &ldquo;db/migrate&rdquo;
  paths.add &ldquo;db/seeds.rb&rdquo;
  paths.add &ldquo;vendor&rdquo;,              load_path: true
  paths.add &ldquo;vendor/assets&rdquo;,       glob: &ldquo;*&rdquo;
paths
{% endcodeblock %}</p>

<p>Rails Application的<code>paths</code>是这样的:</p>

<p>{% codeblock lang:ruby %}</p>

<h1>railties/lib/rails/application/configuration.rb</h1>

<p>@paths ||= begin
  paths = super
  paths.add &ldquo;config/database&rdquo;,    with: &ldquo;config/database.yml&rdquo;
  paths.add &ldquo;config/environment&rdquo;, with: &ldquo;config/environment.rb&rdquo;
  paths.add &ldquo;lib/templates&rdquo;
  paths.add &ldquo;log&rdquo;,                with: &ldquo;log/#{Rails.env}.log&rdquo;
  paths.add &ldquo;public&rdquo;
  paths.add &ldquo;public/javascripts&rdquo;
  paths.add &ldquo;public/stylesheets&rdquo;
  paths.add &ldquo;tmp&rdquo;
  paths
end
{% endcodeblock %}</p>

<h2>根目录</h2>

<p>目录结构配置是在Rails Engine定义的，这里最终得到的paths是每个Engine的根目录，而<code>Rails.root</code>是来自最顶层的Rails Application的根目录。这里Rails对根目录的判断，在Engine和Application的不一样，Application是通过检查存在<code>config.ru</code>文件的目录，而Engine只是查找存在<code>lib</code>目录的目录。</p>

<h2>路径集合</h2>

<p>在上面的配置代码里的<code>paths.add</code>会做两件事情，一是将传进来的字符串定义为<strong>一组路径</strong>，二是将对应的字符串作为这组路径的默认目录。这个Paths里的每一项。比如，在配置完成之后<code>paths["app/models"]</code>可以将这组路径里的所有目录都取回来。</p>

<p>也就是说每一组路径都是一个集合，而有些特殊的路径里只有一个文件，比如<code>paths["config/database"]</code>。在Rails内部在查找对应目录或文件的时候，都是通过这个<code>paths</code>去查找，而不是硬编码相对目录位置。</p>

<p>另外可以看到<code>paths.add</code>方法除了目录之外，还会接受一些选项</p>

<ul>
<li>eager_load: 是否使用预加载</li>
<li>glob: 目录内的文件查找通配符</li>
<li>with: 指定为唯一的文件</li>
<li>load_path: 作为<code>require</code>或<code>load</code>时候可以查找到的路径</li>
</ul>


<p>在了解完目录与加载的事实之后，你会知道Rails其实并不能控制你把Model放到<code>app/controllers</code>或其他地方下，它处理的只是把某些目录设置为查找代码的加载路径。</p>
]]></content>
  </entry>
  
</feed>
